{
    "date": "2025-03-12T07:00:39.962Z",
    "promptbookVersion": "0.88.0-9",
    "prompt": {
        "title": "Knowledge",
        "pipelineUrl": "https://promptbook.studio/promptbook/prepare-knowledge-from-markdown.book#knowledge",
        "parameters": {
            "knowledgeContent": "‚ú® Promptbook üåü New Features üìÇ We have plugin for VSCode to support .book file extension üê≥ Available Docker image üí´ Support of o3-mini model by OpenAI üêã Support of DeepSeek models ü§ç The Book Abstract It's time for a paradigm shift! The future of software is in plain English, French or Latin. During the computer revolution, we have seen multiple generations of computer languages, from the physical rewiring of the vacuum tubes through low-level machine code to the high-level languages like Python or JavaScript. And now, we're on the edge of the next revolution! It's a revolution of writing software in plain human language that is understandable and executable by both humans and machines ‚Äì and it's going to change everything! The incredible growth in power of microprocessors and the Moore's Law have been the driving force behind the ever-more powerful languages, and it's been an amazing journey! Similarly, the large language models (like GPT or Claude) are the next big thing in language technology, and they're set to transform the way we interact with computers. This shift is going to happen, whether we are ready for it or not. Our mission is to make it excellently, not just good. Join us in this journey! üöÄ Get started Take a look at the simple starter kit with books integrated into the Hello World sample applications: Hello Book Hello Book in Node.js Hello Book in Next.js üíú The Promptbook Project Promptbook project is ecosystem of multiple projects and tools, following is a list of most important pieces of the project: Project About Book language Book is a human-understandable markup language for writing AI applications such as chatbots, knowledge bases, agents, avarars, translators, automations and more. There is also a plugin for VSCode to support .book file extension Promptbook Engine Promptbook engine can run applications written in Book language. It is released as multiple NPM packages and Docker HUB Promptbook Studio Promptbook.studio is a web-based editor and runner for book applications. It is still in the experimental MVP stage. Hello world examples: Hello world Hello world in Node.js Hello world in Next.js We also have a community of developers and users of Promptbook: Discord community Landing page ptbk.io Github discussions LinkedIn Promptbook Facebook Promptbook And Promptbook.studio branded socials: Instagram @promptbook.studio And Promptujeme sub-brand: /Subbrand for Czech clients/ Promptujeme.cz Facebook Promptujeme And Promptbook.city branded socials: /Sub-brand for images and graphics generated via Promptbook prompting/ Instagram @promptbook.city Facebook Promptbook City üíô The Book language Following is the documentation and blueprint of the Book language. Book is a language that can be used to write AI applications, agents, workflows, automations, knowledgebases, translators, sheet processors, email automations and more. It allows you to harness the power of AI models in human-like terms, without the need to know the specifics and technicalities of the models. Example # üåü My first Book - BOOK VERSION 1.0.0 - URL https://promptbook.studio/hello.book - INPUT PARAMETER {topic} - OUTPUT PARAMETER {article} # Write an article - PERSONA Jane, marketing specialist with prior experience in writing articles about technology and artificial intelligence - KNOWLEDGE https://wikipedia.org/ - KNOWLEDGE ./journalist-ethics.pdf - EXPECT MIN 1 Sentence - EXPECT MAX 5 Pages > Write an article about {topic} -> {article} Each part of the book defines one of 3 circles: What: Workflows, Tasks and Parameters What work needs to be done. Each book defines a workflow, which is one or more tasks. Each workflow has a fixed input and output. For example, you have a book that generates an article from a topic. Once it generates an article about AI, once about marketing, once about cooking. The workflow (= your AI program) is the same, only the input and output change. Related commands: PARAMETER Who: Personas Who does the work. Each task is performed by a persona. A persona is a description of your virtual employee. It is a higher abstraction than the model, tokens, temperature, top-k, top-p and other model parameters. You can describe what you want in human language like Jane, creative writer with a sense of sharp humour instead of gpt-4-2024-13-31, temperature 1.2, top-k 40, STOP token \".\\n\",.... Personas can have access to different knowledge, tools and actions. They can also consult their work with other personas or user, if allowed. Related commands: PERSONA How: Knowledge, Instruments and Actions The resources used by the personas are used to do the work. Related commands: KNOWLEDGE of documents, websites, and other resources INSTRUMENT for real-time data like time, location, weather, stock prices, searching the internet, calculations, etc. ACTION for actions like sending emails, creating files, ending a workflow, etc. General principles of book language Book language is based on markdown. It is subset of markdown. It is designed to be easy to read and write. It is designed to be understandable by both humans and machines and without specific knowledge of the language. The file has .book extension. It uses UTF-8 non BOM encoding. Book has two variants: flat - which is just a prompt with no structure, and full - which has a structure with tasks, commands and prompts. As it is source code, it can leverage all the features of version control systems like git and does not suffer from the problems of binary formats, proprietary formats, or no-code solutions. But unlike programming languages, it is designed to be understandable by non-programmers and non-technical people. üì¶ Packages (for developers) This library is divided into several packages, all are published from single monorepo. You can install all of them at once: Or you can install them separately: ‚≠ê Marked packages are worth to try first ‚≠ê ptbk - Bundle of all packages, when you want to install everything and you don't care about the size promptbook - Same as ptbk ‚≠êüßô‚Äç‚ôÇÔ∏è @promptbook/wizzard - Wizzard to just run the books in node without any struggle @promptbook/core - Core of the library, it contains the main logic for promptbooks @promptbook/node - Core of the library for Node.js environment @promptbook/browser - Core of the library for browser environment ‚≠ê @promptbook/utils - Utility functions used in the library but also useful for individual use in preprocessing and postprocessing LLM inputs and outputs @promptbook/markdown-utils - Utility functions used for processing markdown (Not finished) @promptbook/wizzard - Wizard for creating+running promptbooks in single line @promptbook/javascript - Execution tools for javascript inside promptbooks @promptbook/openai - Execution tools for OpenAI API, wrapper around OpenAI SDK @promptbook/anthropic-claude - Execution tools for Anthropic Claude API, wrapper around Anthropic Claude SDK @promptbook/vercel - Adapter for Vercel functionalities @promptbook/google - Integration with Google's Gemini API @promptbook/deepseek - Integration with DeepSeek API @promptbook/azure-openai - Execution tools for Azure OpenAI API @promptbook/fake-llm - Mocked execution tools for testing the library and saving the tokens @promptbook/remote-client - Remote client for remote execution of promptbooks @promptbook/remote-server - Remote server for remote execution of promptbooks @promptbook/pdf - Read knowledge from .pdf documents @promptbook/documents - Integration of Markitdown by Microsoft @promptbook/documents - Read knowledge from documents like .docx, .odt,‚Ä¶ @promptbook/legacy-documents - Read knowledge from legacy documents like .doc, .rtf,‚Ä¶ @promptbook/website-crawler - Crawl knowledge from the web @promptbook/editable - Editable book as native javascript object with imperative object API @promptbook/templates - Usefull templates and examples of books which can be used as a starting point @promptbook/types - Just typescript types used in the library ‚≠ê @promptbook/cli - Command line interface utilities for promptbooks üêã Docker image - Promptbook server üìö Dictionary The following glossary is used to clarify certain concepts: General LLM / AI terms Prompt drift is a phenomenon where the AI model starts to generate outputs that are not aligned with the original prompt. This can happen due to the model's training data, the prompt's wording, or the model's architecture. Pipeline, workflow or chain is a sequence of tasks that are executed in a specific order. In the context of AI, a pipeline can refer to a sequence of AI models that are used to process data. Fine-tuning is a process where a pre-trained AI model is further trained on a specific dataset to improve its performance on a specific task. Zero-shot learning is a machine learning paradigm where a model is trained to perform a task without any labeled examples. Instead, the model is provided with a description of the task and is expected to generate the correct output. Few-shot learning is a machine learning paradigm where a model is trained to perform a task with only a few labeled examples. This is in contrast to traditional machine learning, where models are trained on large datasets. Meta-learning is a machine learning paradigm where a model is trained on a variety of tasks and is able to learn new tasks with minimal additional training. This is achieved by learning a set of meta-parameters that can be quickly adapted to new tasks. Retrieval-augmented generation is a machine learning paradigm where a model generates text by retrieving relevant information from a large database of text. This approach combines the benefits of generative models and retrieval models. Longtail refers to non-common or rare events, items, or entities that are not well-represented in the training data of machine learning models. Longtail items are often challenging for models to predict accurately. Note: This section is not complete dictionary, more list of general AI / LLM terms that has connection with Promptbook üíØ Core concepts üìö Collection of pipelines üìØ Pipeline üôá‚Äç‚ôÇÔ∏è Tasks and pipeline sections ü§º Personas ‚≠ï Parameters üöÄ Pipeline execution üß™ Expectations ‚úÇÔ∏è Postprocessing üî£ Words not tokens ‚òØ Separation of concerns Advanced concepts üìö Knowledge (Retrieval-augmented generation) üåè Remote server üÉè Jokers (conditions) üî≥ Metaprompting üåè Linguistically typed languages üåç Auto-Translations üìΩ Images, audio, video, spreadsheets üîô Expectation-aware generation ‚è≥ Just-in-time fine-tuning üî¥ Anomaly detection üëÆ Agent adversary expectations view more üöÇ Promptbook Engine ‚ûï‚ûñ When to use Promptbook? ‚ûï When to use When you are writing app that generates complex things via LLM - like websites, articles, presentations, code, stories, songs,... When you want to separate code from text prompts When you want to describe complex prompt pipelines and don't want to do it in the code When you want to orchestrate multiple prompts together When you want to reuse parts of prompts in multiple places When you want to version your prompts and test multiple versions When you want to log the execution of prompts and backtrace the issues See more ‚ûñ When not to use When you have already implemented single simple prompt and it works fine for your job When OpenAI Assistant (GPTs) is enough for you When you need streaming (this may be implemented in the future, see discussion). When you need to use something other than JavaScript or TypeScript (other languages are on the way, see the discussion) When your main focus is on something other than text - like images, audio, video, spreadsheets (other media types may be added in the future, see discussion) When you need to use recursion (see the discussion) See more üêú Known issues ü§∏‚Äç‚ôÇÔ∏è Iterations not working yet ‚§µÔ∏è Imports not working yet üßº Intentionally not implemented features ‚ûø No recursion üè≥ There are no types, just strings ‚ùî FAQ If you have a question start a discussion, open an issue or write me an email. ‚ùî Why not just use the OpenAI SDK / Anthropic Claude SDK / ...? ‚ùî How is it different from the OpenAI\\`s GPTs? ‚ùî How is it different from the Langchain? ‚ùî How is it different from the DSPy? ‚ùî How is it different from anything? ‚ùî Is Promptbook using RAG (Retrieval-Augmented Generation)? ‚ùî Is Promptbook using function calling? ‚åö Changelog See CHANGELOG.md üìú License Promptbook project is under BUSL 1.1 is an SPDX license üéØ Todos See TODO.md ü§ù Partners üñãÔ∏è Contributing We are open to pull requests, feedback, and suggestions. You can also ‚≠ê star the project, follow us on GitHub or various other social networks. "
        },
        "content": "You are experienced data researcher, extract the important knowledge from the document.\n\n# Rules\n\n-   Make pieces of information concise, clear, and easy to understand\n-   One piece of information should be approximately 1 paragraph\n-   Divide the paragraphs by markdown horizontal lines ---\n-   Omit irrelevant information\n-   Group redundant information\n-   Write just extracted information, nothing else\n\n# The document\n\nTake information from this document:\n\n> {knowledgeContent}",
        "modelRequirements": {
            "modelVariant": "CHAT"
        },
        "expectations": {}
    },
    "promptResult": {
        "content": "---\n\nPromptbook is an ecosystem of projects and tools for writing AI applications using plain human language, supported by a VSCode plugin and Docker image.\n\n---\n\nThe Book language is a human-understandable markup language for creating AI applications such as chatbots, knowledge bases, agents, and automations. It is based on markdown and designed to be easily readable by both humans and machines.\n\n---\n\nPromptbook consists of three main components: What (workflows, tasks, and parameters), Who (personas), and How (knowledge, instruments, and actions). These components define the work to be done, who does it, and the resources used.\n\n---\n\nThe project includes several packages for developers, such as @promptbook/core, @promptbook/utils, and integrations with various AI models like OpenAI, Anthropic Claude, and DeepSeek.\n\n---\n\nPromptbook is suitable for complex AI-generated content creation, separating code from text prompts, orchestrating multiple prompts, and versioning prompts. It may not be ideal for simple, single-prompt applications or when OpenAI Assistant (GPTs) is sufficient.\n\n---\n\nThe project is open-source and welcomes contributions. It is licensed under BUSL 1.1 and has a growing community across various social media platforms.",
        "modelName": "claude-3-5-sonnet-20240620",
        "timing": {
            "start": "2025-03-12T07:00:33.456Z",
            "complete": "2025-03-12T07:00:39.960Z"
        },
        "usage": {
            "price": {
                "value": 0.013758
            },
            "input": {
                "tokensCount": {
                    "value": 3166
                },
                "charactersCount": {
                    "value": 13025
                },
                "wordsCount": {
                    "value": 2106
                },
                "sentencesCount": {
                    "value": 104
                },
                "linesCount": {
                    "value": 214
                },
                "paragraphsCount": {
                    "value": 6
                },
                "pagesCount": {
                    "value": 5
                }
            },
            "output": {
                "tokensCount": {
                    "value": 284
                },
                "charactersCount": {
                    "value": 1254
                },
                "wordsCount": {
                    "value": 185
                },
                "sentencesCount": {
                    "value": 11
                },
                "linesCount": {
                    "value": 28
                },
                "paragraphsCount": {
                    "value": 12
                },
                "pagesCount": {
                    "value": 1
                }
            }
        },
        "rawPromptContent": "You are experienced data researcher, extract the important knowledge from the document.\n\n# Rules\n\n-   Make pieces of information concise, clear, and easy to understand\n-   One piece of information should be approximately 1 paragraph\n-   Divide the paragraphs by markdown horizontal lines ---\n-   Omit irrelevant information\n-   Group redundant information\n-   Write just extracted information, nothing else\n\n# The document\n\nTake information from this document:\n\n> ‚ú® Promptbook üåü New Features üìÇ We have plugin for VSCode to support .book file extension üê≥ Available Docker image üí´ Support of o3-mini model by OpenAI üêã Support of DeepSeek models ü§ç The Book Abstract It's time for a paradigm shift! The future of software is in plain English, French or Latin. During the computer revolution, we have seen multiple generations of computer languages, from the physical rewiring of the vacuum tubes through low-level machine code to the high-level languages like Python or JavaScript. And now, we're on the edge of the next revolution! It's a revolution of writing software in plain human language that is understandable and executable by both humans and machines ‚Äì and it's going to change everything! The incredible growth in power of microprocessors and the Moore's Law have been the driving force behind the ever-more powerful languages, and it's been an amazing journey! Similarly, the large language models (like GPT or Claude) are the next big thing in language technology, and they're set to transform the way we interact with computers. This shift is going to happen, whether we are ready for it or not. Our mission is to make it excellently, not just good. Join us in this journey! üöÄ Get started Take a look at the simple starter kit with books integrated into the Hello World sample applications: Hello Book Hello Book in Node.js Hello Book in Next.js üíú The Promptbook Project Promptbook project is ecosystem of multiple projects and tools, following is a list of most important pieces of the project: Project About Book language Book is a human-understandable markup language for writing AI applications such as chatbots, knowledge bases, agents, avarars, translators, automations and more. There is also a plugin for VSCode to support .book file extension Promptbook Engine Promptbook engine can run applications written in Book language. It is released as multiple NPM packages and Docker HUB Promptbook Studio Promptbook.studio is a web-based editor and runner for book applications. It is still in the experimental MVP stage. Hello world examples: Hello world Hello world in Node.js Hello world in Next.js We also have a community of developers and users of Promptbook: Discord community Landing page ptbk.io Github discussions LinkedIn Promptbook Facebook Promptbook And Promptbook.studio branded socials: Instagram @promptbook.studio And Promptujeme sub-brand: /Subbrand for Czech clients/ Promptujeme.cz Facebook Promptujeme And Promptbook.city branded socials: /Sub-brand for images and graphics generated via Promptbook prompting/ Instagram @promptbook.city Facebook Promptbook City üíô The Book language Following is the documentation and blueprint of the Book language. Book is a language that can be used to write AI applications, agents, workflows, automations, knowledgebases, translators, sheet processors, email automations and more. It allows you to harness the power of AI models in human-like terms, without the need to know the specifics and technicalities of the models. Example # üåü My first Book - BOOK VERSION 1.0.0 - URL https://promptbook.studio/hello.book - INPUT PARAMETER \\{topic\\} - OUTPUT PARAMETER \\{article\\} # Write an article - PERSONA Jane, marketing specialist with prior experience in writing articles about technology and artificial intelligence - KNOWLEDGE https://wikipedia.org/ - KNOWLEDGE ./journalist-ethics.pdf - EXPECT MIN 1 Sentence - EXPECT MAX 5 Pages > Write an article about \\{topic\\} -> \\{article\\} Each part of the book defines one of 3 circles: What: Workflows, Tasks and Parameters What work needs to be done. Each book defines a workflow, which is one or more tasks. Each workflow has a fixed input and output. For example, you have a book that generates an article from a topic. Once it generates an article about AI, once about marketing, once about cooking. The workflow (= your AI program) is the same, only the input and output change. Related commands: PARAMETER Who: Personas Who does the work. Each task is performed by a persona. A persona is a description of your virtual employee. It is a higher abstraction than the model, tokens, temperature, top-k, top-p and other model parameters. You can describe what you want in human language like Jane, creative writer with a sense of sharp humour instead of gpt-4-2024-13-31, temperature 1.2, top-k 40, STOP token \".\\n\",.... Personas can have access to different knowledge, tools and actions. They can also consult their work with other personas or user, if allowed. Related commands: PERSONA How: Knowledge, Instruments and Actions The resources used by the personas are used to do the work. Related commands: KNOWLEDGE of documents, websites, and other resources INSTRUMENT for real-time data like time, location, weather, stock prices, searching the internet, calculations, etc. ACTION for actions like sending emails, creating files, ending a workflow, etc. General principles of book language Book language is based on markdown. It is subset of markdown. It is designed to be easy to read and write. It is designed to be understandable by both humans and machines and without specific knowledge of the language. The file has .book extension. It uses UTF-8 non BOM encoding. Book has two variants: flat - which is just a prompt with no structure, and full - which has a structure with tasks, commands and prompts. As it is source code, it can leverage all the features of version control systems like git and does not suffer from the problems of binary formats, proprietary formats, or no-code solutions. But unlike programming languages, it is designed to be understandable by non-programmers and non-technical people. üì¶ Packages (for developers) This library is divided into several packages, all are published from single monorepo. You can install all of them at once: Or you can install them separately: ‚≠ê Marked packages are worth to try first ‚≠ê ptbk - Bundle of all packages, when you want to install everything and you don't care about the size promptbook - Same as ptbk ‚≠êüßô‚Äç‚ôÇÔ∏è @promptbook/wizzard - Wizzard to just run the books in node without any struggle @promptbook/core - Core of the library, it contains the main logic for promptbooks @promptbook/node - Core of the library for Node.js environment @promptbook/browser - Core of the library for browser environment ‚≠ê @promptbook/utils - Utility functions used in the library but also useful for individual use in preprocessing and postprocessing LLM inputs and outputs @promptbook/markdown-utils - Utility functions used for processing markdown (Not finished) @promptbook/wizzard - Wizard for creating+running promptbooks in single line @promptbook/javascript - Execution tools for javascript inside promptbooks @promptbook/openai - Execution tools for OpenAI API, wrapper around OpenAI SDK @promptbook/anthropic-claude - Execution tools for Anthropic Claude API, wrapper around Anthropic Claude SDK @promptbook/vercel - Adapter for Vercel functionalities @promptbook/google - Integration with Google's Gemini API @promptbook/deepseek - Integration with DeepSeek API @promptbook/azure-openai - Execution tools for Azure OpenAI API @promptbook/fake-llm - Mocked execution tools for testing the library and saving the tokens @promptbook/remote-client - Remote client for remote execution of promptbooks @promptbook/remote-server - Remote server for remote execution of promptbooks @promptbook/pdf - Read knowledge from .pdf documents @promptbook/documents - Integration of Markitdown by Microsoft @promptbook/documents - Read knowledge from documents like .docx, .odt,‚Ä¶ @promptbook/legacy-documents - Read knowledge from legacy documents like .doc, .rtf,‚Ä¶ @promptbook/website-crawler - Crawl knowledge from the web @promptbook/editable - Editable book as native javascript object with imperative object API @promptbook/templates - Usefull templates and examples of books which can be used as a starting point @promptbook/types - Just typescript types used in the library ‚≠ê @promptbook/cli - Command line interface utilities for promptbooks üêã Docker image - Promptbook server üìö Dictionary The following glossary is used to clarify certain concepts: General LLM / AI terms Prompt drift is a phenomenon where the AI model starts to generate outputs that are not aligned with the original prompt. This can happen due to the model's training data, the prompt's wording, or the model's architecture. Pipeline, workflow or chain is a sequence of tasks that are executed in a specific order. In the context of AI, a pipeline can refer to a sequence of AI models that are used to process data. Fine-tuning is a process where a pre-trained AI model is further trained on a specific dataset to improve its performance on a specific task. Zero-shot learning is a machine learning paradigm where a model is trained to perform a task without any labeled examples. Instead, the model is provided with a description of the task and is expected to generate the correct output. Few-shot learning is a machine learning paradigm where a model is trained to perform a task with only a few labeled examples. This is in contrast to traditional machine learning, where models are trained on large datasets. Meta-learning is a machine learning paradigm where a model is trained on a variety of tasks and is able to learn new tasks with minimal additional training. This is achieved by learning a set of meta-parameters that can be quickly adapted to new tasks. Retrieval-augmented generation is a machine learning paradigm where a model generates text by retrieving relevant information from a large database of text. This approach combines the benefits of generative models and retrieval models. Longtail refers to non-common or rare events, items, or entities that are not well-represented in the training data of machine learning models. Longtail items are often challenging for models to predict accurately. Note: This section is not complete dictionary, more list of general AI / LLM terms that has connection with Promptbook üíØ Core concepts üìö Collection of pipelines üìØ Pipeline üôá‚Äç‚ôÇÔ∏è Tasks and pipeline sections ü§º Personas ‚≠ï Parameters üöÄ Pipeline execution üß™ Expectations ‚úÇÔ∏è Postprocessing üî£ Words not tokens ‚òØ Separation of concerns Advanced concepts üìö Knowledge (Retrieval-augmented generation) üåè Remote server üÉè Jokers (conditions) üî≥ Metaprompting üåè Linguistically typed languages üåç Auto-Translations üìΩ Images, audio, video, spreadsheets üîô Expectation-aware generation ‚è≥ Just-in-time fine-tuning üî¥ Anomaly detection üëÆ Agent adversary expectations view more üöÇ Promptbook Engine ‚ûï‚ûñ When to use Promptbook? ‚ûï When to use When you are writing app that generates complex things via LLM - like websites, articles, presentations, code, stories, songs,... When you want to separate code from text prompts When you want to describe complex prompt pipelines and don't want to do it in the code When you want to orchestrate multiple prompts together When you want to reuse parts of prompts in multiple places When you want to version your prompts and test multiple versions When you want to log the execution of prompts and backtrace the issues See more ‚ûñ When not to use When you have already implemented single simple prompt and it works fine for your job When OpenAI Assistant (GPTs) is enough for you When you need streaming (this may be implemented in the future, see discussion). When you need to use something other than JavaScript or TypeScript (other languages are on the way, see the discussion) When your main focus is on something other than text - like images, audio, video, spreadsheets (other media types may be added in the future, see discussion) When you need to use recursion (see the discussion) See more üêú Known issues ü§∏‚Äç‚ôÇÔ∏è Iterations not working yet ‚§µÔ∏è Imports not working yet üßº Intentionally not implemented features ‚ûø No recursion üè≥ There are no types, just strings ‚ùî FAQ If you have a question start a discussion, open an issue or write me an email. ‚ùî Why not just use the OpenAI SDK / Anthropic Claude SDK / ...? ‚ùî How is it different from the OpenAI\\`s GPTs? ‚ùî How is it different from the Langchain? ‚ùî How is it different from the DSPy? ‚ùî How is it different from anything? ‚ùî Is Promptbook using RAG (Retrieval-Augmented Generation)? ‚ùî Is Promptbook using function calling? ‚åö Changelog See CHANGELOG.md üìú License Promptbook project is under BUSL 1.1 is an SPDX license üéØ Todos See TODO.md ü§ù Partners üñãÔ∏è Contributing We are open to pull requests, feedback, and suggestions. You can also ‚≠ê star the project, follow us on GitHub or various other social networks. ",
        "rawRequest": {
            "model": "claude-3-5-sonnet-20240620",
            "max_tokens": 4096,
            "messages": [
                {
                    "role": "user",
                    "content": "You are experienced data researcher, extract the important knowledge from the document.\n\n# Rules\n\n-   Make pieces of information concise, clear, and easy to understand\n-   One piece of information should be approximately 1 paragraph\n-   Divide the paragraphs by markdown horizontal lines ---\n-   Omit irrelevant information\n-   Group redundant information\n-   Write just extracted information, nothing else\n\n# The document\n\nTake information from this document:\n\n> ‚ú® Promptbook üåü New Features üìÇ We have plugin for VSCode to support .book file extension üê≥ Available Docker image üí´ Support of o3-mini model by OpenAI üêã Support of DeepSeek models ü§ç The Book Abstract It's time for a paradigm shift! The future of software is in plain English, French or Latin. During the computer revolution, we have seen multiple generations of computer languages, from the physical rewiring of the vacuum tubes through low-level machine code to the high-level languages like Python or JavaScript. And now, we're on the edge of the next revolution! It's a revolution of writing software in plain human language that is understandable and executable by both humans and machines ‚Äì and it's going to change everything! The incredible growth in power of microprocessors and the Moore's Law have been the driving force behind the ever-more powerful languages, and it's been an amazing journey! Similarly, the large language models (like GPT or Claude) are the next big thing in language technology, and they're set to transform the way we interact with computers. This shift is going to happen, whether we are ready for it or not. Our mission is to make it excellently, not just good. Join us in this journey! üöÄ Get started Take a look at the simple starter kit with books integrated into the Hello World sample applications: Hello Book Hello Book in Node.js Hello Book in Next.js üíú The Promptbook Project Promptbook project is ecosystem of multiple projects and tools, following is a list of most important pieces of the project: Project About Book language Book is a human-understandable markup language for writing AI applications such as chatbots, knowledge bases, agents, avarars, translators, automations and more. There is also a plugin for VSCode to support .book file extension Promptbook Engine Promptbook engine can run applications written in Book language. It is released as multiple NPM packages and Docker HUB Promptbook Studio Promptbook.studio is a web-based editor and runner for book applications. It is still in the experimental MVP stage. Hello world examples: Hello world Hello world in Node.js Hello world in Next.js We also have a community of developers and users of Promptbook: Discord community Landing page ptbk.io Github discussions LinkedIn Promptbook Facebook Promptbook And Promptbook.studio branded socials: Instagram @promptbook.studio And Promptujeme sub-brand: /Subbrand for Czech clients/ Promptujeme.cz Facebook Promptujeme And Promptbook.city branded socials: /Sub-brand for images and graphics generated via Promptbook prompting/ Instagram @promptbook.city Facebook Promptbook City üíô The Book language Following is the documentation and blueprint of the Book language. Book is a language that can be used to write AI applications, agents, workflows, automations, knowledgebases, translators, sheet processors, email automations and more. It allows you to harness the power of AI models in human-like terms, without the need to know the specifics and technicalities of the models. Example # üåü My first Book - BOOK VERSION 1.0.0 - URL https://promptbook.studio/hello.book - INPUT PARAMETER \\{topic\\} - OUTPUT PARAMETER \\{article\\} # Write an article - PERSONA Jane, marketing specialist with prior experience in writing articles about technology and artificial intelligence - KNOWLEDGE https://wikipedia.org/ - KNOWLEDGE ./journalist-ethics.pdf - EXPECT MIN 1 Sentence - EXPECT MAX 5 Pages > Write an article about \\{topic\\} -> \\{article\\} Each part of the book defines one of 3 circles: What: Workflows, Tasks and Parameters What work needs to be done. Each book defines a workflow, which is one or more tasks. Each workflow has a fixed input and output. For example, you have a book that generates an article from a topic. Once it generates an article about AI, once about marketing, once about cooking. The workflow (= your AI program) is the same, only the input and output change. Related commands: PARAMETER Who: Personas Who does the work. Each task is performed by a persona. A persona is a description of your virtual employee. It is a higher abstraction than the model, tokens, temperature, top-k, top-p and other model parameters. You can describe what you want in human language like Jane, creative writer with a sense of sharp humour instead of gpt-4-2024-13-31, temperature 1.2, top-k 40, STOP token \".\\n\",.... Personas can have access to different knowledge, tools and actions. They can also consult their work with other personas or user, if allowed. Related commands: PERSONA How: Knowledge, Instruments and Actions The resources used by the personas are used to do the work. Related commands: KNOWLEDGE of documents, websites, and other resources INSTRUMENT for real-time data like time, location, weather, stock prices, searching the internet, calculations, etc. ACTION for actions like sending emails, creating files, ending a workflow, etc. General principles of book language Book language is based on markdown. It is subset of markdown. It is designed to be easy to read and write. It is designed to be understandable by both humans and machines and without specific knowledge of the language. The file has .book extension. It uses UTF-8 non BOM encoding. Book has two variants: flat - which is just a prompt with no structure, and full - which has a structure with tasks, commands and prompts. As it is source code, it can leverage all the features of version control systems like git and does not suffer from the problems of binary formats, proprietary formats, or no-code solutions. But unlike programming languages, it is designed to be understandable by non-programmers and non-technical people. üì¶ Packages (for developers) This library is divided into several packages, all are published from single monorepo. You can install all of them at once: Or you can install them separately: ‚≠ê Marked packages are worth to try first ‚≠ê ptbk - Bundle of all packages, when you want to install everything and you don't care about the size promptbook - Same as ptbk ‚≠êüßô‚Äç‚ôÇÔ∏è @promptbook/wizzard - Wizzard to just run the books in node without any struggle @promptbook/core - Core of the library, it contains the main logic for promptbooks @promptbook/node - Core of the library for Node.js environment @promptbook/browser - Core of the library for browser environment ‚≠ê @promptbook/utils - Utility functions used in the library but also useful for individual use in preprocessing and postprocessing LLM inputs and outputs @promptbook/markdown-utils - Utility functions used for processing markdown (Not finished) @promptbook/wizzard - Wizard for creating+running promptbooks in single line @promptbook/javascript - Execution tools for javascript inside promptbooks @promptbook/openai - Execution tools for OpenAI API, wrapper around OpenAI SDK @promptbook/anthropic-claude - Execution tools for Anthropic Claude API, wrapper around Anthropic Claude SDK @promptbook/vercel - Adapter for Vercel functionalities @promptbook/google - Integration with Google's Gemini API @promptbook/deepseek - Integration with DeepSeek API @promptbook/azure-openai - Execution tools for Azure OpenAI API @promptbook/fake-llm - Mocked execution tools for testing the library and saving the tokens @promptbook/remote-client - Remote client for remote execution of promptbooks @promptbook/remote-server - Remote server for remote execution of promptbooks @promptbook/pdf - Read knowledge from .pdf documents @promptbook/documents - Integration of Markitdown by Microsoft @promptbook/documents - Read knowledge from documents like .docx, .odt,‚Ä¶ @promptbook/legacy-documents - Read knowledge from legacy documents like .doc, .rtf,‚Ä¶ @promptbook/website-crawler - Crawl knowledge from the web @promptbook/editable - Editable book as native javascript object with imperative object API @promptbook/templates - Usefull templates and examples of books which can be used as a starting point @promptbook/types - Just typescript types used in the library ‚≠ê @promptbook/cli - Command line interface utilities for promptbooks üêã Docker image - Promptbook server üìö Dictionary The following glossary is used to clarify certain concepts: General LLM / AI terms Prompt drift is a phenomenon where the AI model starts to generate outputs that are not aligned with the original prompt. This can happen due to the model's training data, the prompt's wording, or the model's architecture. Pipeline, workflow or chain is a sequence of tasks that are executed in a specific order. In the context of AI, a pipeline can refer to a sequence of AI models that are used to process data. Fine-tuning is a process where a pre-trained AI model is further trained on a specific dataset to improve its performance on a specific task. Zero-shot learning is a machine learning paradigm where a model is trained to perform a task without any labeled examples. Instead, the model is provided with a description of the task and is expected to generate the correct output. Few-shot learning is a machine learning paradigm where a model is trained to perform a task with only a few labeled examples. This is in contrast to traditional machine learning, where models are trained on large datasets. Meta-learning is a machine learning paradigm where a model is trained on a variety of tasks and is able to learn new tasks with minimal additional training. This is achieved by learning a set of meta-parameters that can be quickly adapted to new tasks. Retrieval-augmented generation is a machine learning paradigm where a model generates text by retrieving relevant information from a large database of text. This approach combines the benefits of generative models and retrieval models. Longtail refers to non-common or rare events, items, or entities that are not well-represented in the training data of machine learning models. Longtail items are often challenging for models to predict accurately. Note: This section is not complete dictionary, more list of general AI / LLM terms that has connection with Promptbook üíØ Core concepts üìö Collection of pipelines üìØ Pipeline üôá‚Äç‚ôÇÔ∏è Tasks and pipeline sections ü§º Personas ‚≠ï Parameters üöÄ Pipeline execution üß™ Expectations ‚úÇÔ∏è Postprocessing üî£ Words not tokens ‚òØ Separation of concerns Advanced concepts üìö Knowledge (Retrieval-augmented generation) üåè Remote server üÉè Jokers (conditions) üî≥ Metaprompting üåè Linguistically typed languages üåç Auto-Translations üìΩ Images, audio, video, spreadsheets üîô Expectation-aware generation ‚è≥ Just-in-time fine-tuning üî¥ Anomaly detection üëÆ Agent adversary expectations view more üöÇ Promptbook Engine ‚ûï‚ûñ When to use Promptbook? ‚ûï When to use When you are writing app that generates complex things via LLM - like websites, articles, presentations, code, stories, songs,... When you want to separate code from text prompts When you want to describe complex prompt pipelines and don't want to do it in the code When you want to orchestrate multiple prompts together When you want to reuse parts of prompts in multiple places When you want to version your prompts and test multiple versions When you want to log the execution of prompts and backtrace the issues See more ‚ûñ When not to use When you have already implemented single simple prompt and it works fine for your job When OpenAI Assistant (GPTs) is enough for you When you need streaming (this may be implemented in the future, see discussion). When you need to use something other than JavaScript or TypeScript (other languages are on the way, see the discussion) When your main focus is on something other than text - like images, audio, video, spreadsheets (other media types may be added in the future, see discussion) When you need to use recursion (see the discussion) See more üêú Known issues ü§∏‚Äç‚ôÇÔ∏è Iterations not working yet ‚§µÔ∏è Imports not working yet üßº Intentionally not implemented features ‚ûø No recursion üè≥ There are no types, just strings ‚ùî FAQ If you have a question start a discussion, open an issue or write me an email. ‚ùî Why not just use the OpenAI SDK / Anthropic Claude SDK / ...? ‚ùî How is it different from the OpenAI\\`s GPTs? ‚ùî How is it different from the Langchain? ‚ùî How is it different from the DSPy? ‚ùî How is it different from anything? ‚ùî Is Promptbook using RAG (Retrieval-Augmented Generation)? ‚ùî Is Promptbook using function calling? ‚åö Changelog See CHANGELOG.md üìú License Promptbook project is under BUSL 1.1 is an SPDX license üéØ Todos See TODO.md ü§ù Partners üñãÔ∏è Contributing We are open to pull requests, feedback, and suggestions. You can also ‚≠ê star the project, follow us on GitHub or various other social networks. "
                }
            ]
        },
        "rawResponse": {
            "id": "msg_01DSLnfix66iywdSN7Fguccs",
            "type": "message",
            "role": "assistant",
            "model": "claude-3-5-sonnet-20240620",
            "content": [
                {
                    "type": "text",
                    "text": "---\n\nPromptbook is an ecosystem of projects and tools for writing AI applications using plain human language, supported by a VSCode plugin and Docker image.\n\n---\n\nThe Book language is a human-understandable markup language for creating AI applications such as chatbots, knowledge bases, agents, and automations. It is based on markdown and designed to be easily readable by both humans and machines.\n\n---\n\nPromptbook consists of three main components: What (workflows, tasks, and parameters), Who (personas), and How (knowledge, instruments, and actions). These components define the work to be done, who does it, and the resources used.\n\n---\n\nThe project includes several packages for developers, such as @promptbook/core, @promptbook/utils, and integrations with various AI models like OpenAI, Anthropic Claude, and DeepSeek.\n\n---\n\nPromptbook is suitable for complex AI-generated content creation, separating code from text prompts, orchestrating multiple prompts, and versioning prompts. It may not be ideal for simple, single-prompt applications or when OpenAI Assistant (GPTs) is sufficient.\n\n---\n\nThe project is open-source and welcomes contributions. It is licensed under BUSL 1.1 and has a growing community across various social media platforms."
                }
            ],
            "stop_reason": "end_turn",
            "stop_sequence": null,
            "usage": {
                "input_tokens": 3166,
                "cache_creation_input_tokens": 0,
                "cache_read_input_tokens": 0,
                "output_tokens": 284
            }
        }
    }
}
