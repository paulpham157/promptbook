/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export interface paths {
    '/api/v1/calendar/add-event': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post: operations['postApiV1CalendarAdd-event'];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/api/v1/calendar/detail': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations['getApiV1CalendarDetail'];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/api/v1/calendar/event-find-conflict': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post: operations['postApiV1CalendarEvent-find-conflict'];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/api/v1/calendar/event-list': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations['getApiV1CalendarEvent-list'];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/api/v1/calendar/scheduling-assistant': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations['getApiV1CalendarScheduling-assistant'];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/api/v1/calendar/timezones': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations['getApiV1CalendarTimezones'];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/api/v1/cart/detail': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations['getApiV1CartDetail'];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/api/v1/cart/buy': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post: operations['postApiV1CartBuy'];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/api/v1/cart/change-quantity': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post: operations['postApiV1CartChange-quantity'];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/api/v1/cart/set-delivery': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post: operations['postApiV1CartSet-delivery'];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/api/v1/cart/set-payment': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post: operations['postApiV1CartSet-payment'];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/api/v1/cart/set-packeta-branch': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post: operations['postApiV1CartSet-packeta-branch'];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/api/v1/customer/create-api-key': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post: operations['postApiV1CustomerCreate-api-key'];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/api/v1/customer/credit-log': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations['getApiV1CustomerCredit-log'];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/api/v1/customer/credit-spend': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post: operations['postApiV1CustomerCredit-spend'];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/api/v1/customer/customer-match-customer': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** @description Create many-to-many relation between two customers.
         *
         *     This feature is suitable, for example, for matching clients and trainers, or for obtaining contacts on a dating site or company contact. */
        post: operations['postApiV1CustomerCustomer-match-customer'];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/api/v1/customer/detail': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations['getApiV1CustomerDetail'];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/api/v1/customer/get-account-info': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations['getApiV1CustomerGet-account-info'];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/api/v1/customer/login': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** @description Create a new customer identity based on real customer e-mail and password. Return identity session value or error code.
         *
         *     List of error codes:
         *
         *     | Code | Message |
         *     |------|---------|
         *     | E001 | Customer login failed. |
         *     | E002 | Customer e-mail does not exist. |
         *     | E003 | Customer have not a registered account. |
         *     | E004 | Wrong e-mail or password. |
         *     | E005 | Customer account has been banned. |
         *     | E006 | Too many login attempts. |
         *     | E007 | Customer mail has not been authorized. | */
        post: operations['postApiV1CustomerLogin'];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/api/v1/customer/logout': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post: operations['postApiV1CustomerLogout'];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/api/v1/customer/magic-auth': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** @description Create a new customer identity based on e-mail without password. Return identity session value or error code.
         *
         *     List of error codes:
         *
         *     | Code | Message |
         *     |------|---------|
         *     | E001 | Customer login failed. |
         *     | E002 | Customer e-mail does not exist. |
         *     | E003 | Customer have not a registered account. |
         *     | E004 | Wrong e-mail or password. |
         *     | E005 | Customer account has been banned. |
         *     | E006 | Too many login attempts. |
         *     | E007 | Customer mail has not been authorized. | */
        post: operations['postApiV1CustomerMagic-auth'];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/api/v1/customer/matched-customer-list': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations['getApiV1CustomerMatched-customer-list'];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/api/v1/customer/order-list': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations['getApiV1CustomerOrder-list'];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/api/v1/customer/register-account': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** @description List of error codes:
         *
         *     | Code | Message |
         *     |------|---------|
         *     | E001 | Customer register failed. |
         *     | E002 | Customer has been registered. |
         *     | E003 | Customer account has been banned. |
         *     | E004 | Too many registration attempts. | */
        post: operations['postApiV1CustomerRegister-account'];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/api/v1/customer/register-account-verify': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post: operations['postApiV1CustomerRegister-account-verify'];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/api/v1/customer/reset-password': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** @description Create a new reset password request and send verification mail to customer automatically. */
        post: operations['postApiV1CustomerReset-password'];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/api/v1/customer/set-new-password': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** @description Set a new password based on one time token given from user verification e-mail.
         *
         *     List of error codes:
         *
         *     | Code | Message |
         *     |------|---------|
         *     | E001 | Change password failed. |
         *     | E002 | You have entered a previously used password. For security reasons, please enter a new and unique password. |
         *     | E003 | Reset password request does not exist. |
         *     | E004 | Reset password request has been expired. | */
        post: operations['postApiV1CustomerSet-new-password'];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/api/v1/emailer/send': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post: operations['postApiV1EmailerSend'];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/api/v1/form/detail': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations['getApiV1FormDetail'];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/api/v1/newsletter/register-contact': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post: operations['postApiV1NewsletterRegister-contact'];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/api/v1/ping/': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations['getApiV1Ping'];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/api/v1/ping/error': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description This endpoint always fail. */
        get: operations['getApiV1PingError'];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/api/v1/product/detail': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations['getApiV1ProductDetail'];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/api/v1/product/feed': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description Load full list of products from organisation database. By default, we only return basic properties for all products. If you want to return entire products, you need to specify additional properties.
         *
         *     Default properties (contains in all returned products): `id`, `name`, `slug`, `shortDescription`, `mainImageUrl`, `mainCategory`, `price`, `priceWithoutVat`, `vat`, `position`, `active`, `soldOut`, `warehouseAllQuantity`, `warehouseLimit`, `customFields`, `event`. */
        get: operations['getApiV1ProductFeed'];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/api/v1/product-category/detail': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations['getApiV1Product-categoryDetail'];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/api/v1/product-category/list': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations['getApiV1Product-categoryList'];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/api/v1/rate-limit-status/': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations['getApiV1Rate-limit-status'];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/api/v1/referral/referred-customers': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations['getApiV1ReferralReferred-customers'];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/api/v1/routing/route': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations['getApiV1RoutingRoute'];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/api/v1/security/captcha': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description Render a random captcha image as base64.
         *
         *     Example:
         *
         *     ![captcha](https://cdn.brj.app/images/captcha-nu3bx.webp) */
        get: operations['getApiV1SecurityCaptcha'];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/api/v1/security/captcha-verify': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations['getApiV1SecurityCaptcha-verify'];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/api/v1/service-status/': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description The service retrieves information about the domain's availability based on regular crawler scans. If the domain is not already tracked, it will be automatically included for crawling.
         *
         *     The crawling rules are described on the page [BRJ Bot](https://brj.app/robot).
         *
         *     Domain availability scanning is not subject to robots.txt rules, and we can crawl all domains on the internet. We use multiple signals for scanning, such as downloading the homepage via HTTP request, checking DNS records, requesting HTTP headers, completely loading and rendering the page in Handles Chrome, and more.. */
        get: operations['getApiV1Service-status'];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/api/v1/shop/order/create': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** @description Create a new order. After create a order, please redirect customer to `links.orderPageLink`. */
        post: operations['postApiV1ShopOrderCreate'];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/api/v1/shop/order/detail': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations['getApiV1ShopOrderDetail'];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/api/v1/shop/order/create-payment': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post: operations['postApiV1ShopOrderCreate-payment'];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/api/v1/shop/order/check-payment-status': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post: operations['postApiV1ShopOrderCheck-payment-status'];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/api/v1/shop/order/storno': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post: operations['postApiV1ShopOrderStorno'];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/api/v1/shop/payment/create': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations['getApiV1ShopPaymentCreate'];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/api/v1/shop/payment/process-notification': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations['getApiV1ShopPaymentProcess-notification'];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/api/v1/support/contact-form': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post: operations['postApiV1SupportContact-form'];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/api/v1/tracking/email-pixel': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description Render and return tracking pixel inside e-mail message. */
        get: operations['getApiV1TrackingEmail-pixel'];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/api/v1/webpage/favicon': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations['getApiV1WebpageFavicon'];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/api/v1/webpage/screenshot': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations['getApiV1WebpageScreenshot'];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/bff/account/': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations['getBffAccount'];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/bff/account/detail': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations['getBffAccountDetail'];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/bff/account/detail-contact': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations['getBffAccountDetail-contact'];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/bff/account/audit-login-attempts': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations['getBffAccountAudit-login-attempts'];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/bff/account/find-organisation': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations['getBffAccountFind-organisation'];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/bff/account/login-otp-auth': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post: operations['postBffAccountLogin-otp-auth'];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/bff/account/reset-password': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post: operations['postBffAccountReset-password'];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/bff/account/restore-personal-account': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post: operations['postBffAccountRestore-personal-account'];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/bff/account/set-activity-status': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations['getBffAccountSet-activity-status'];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/bff/account/set-name': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post: operations['postBffAccountSet-name'];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/bff/account/setup-otp-generate-secret': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post: operations['postBffAccountSetup-otp-generate-secret'];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/bff/account/setup-otp-save': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post: operations['postBffAccountSetup-otp-save'];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/bff/account/switch-organisation': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations['getBffAccountSwitch-organisation'];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/bff/account/sync-status': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations['getBffAccountSync-status'];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/bff/account/verify-email': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations['getBffAccountVerify-email'];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/bff/account/create-login-attempt': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post: operations['postBffAccountCreate-login-attempt'];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/bff/account/login': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post: operations['postBffAccountLogin'];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/bff/account/logout': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post: operations['postBffAccountLogout'];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/bff/account/create-account': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post: operations['postBffAccountCreate-account'];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/bff/ai/question': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post: operations['postBffAiQuestion'];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/bff/ai/test': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations['getBffAiTest'];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/bff/api-key/list': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations['getBffApi-keyList'];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/bff/api-key/detail': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations['getBffApi-keyDetail'];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/bff/api-key/generate-key': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post: operations['postBffApi-keyGenerate-key'];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/bff/blob/upload': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post: operations['postBffBlobUpload'];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/bff/blob/upload-user-avatar': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post: operations['postBffBlobUpload-user-avatar'];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/bff/calendar/calendar-list': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations['getBffCalendarCalendar-list'];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/bff/calendar/calendar-detail': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations['getBffCalendarCalendar-detail'];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/bff/calendar/calendar-settings': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations['getBffCalendarCalendar-settings'];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/bff/calendar/calendar-analytics': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations['getBffCalendarCalendar-analytics'];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/bff/calendar/calendar-add': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post: operations['postBffCalendarCalendar-add'];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/bff/calendar/detail-reservations': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations['getBffCalendarDetail-reservations'];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/bff/calendar/event-detail': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations['getBffCalendarEvent-detail'];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/bff/calendar/event-find-conflict': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations['getBffCalendarEvent-find-conflict'];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/bff/calendar/event-add': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post: operations['postBffCalendarEvent-add'];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/bff/calendar/event-type-list': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations['getBffCalendarEvent-type-list'];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/bff/cms/menu': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations['getBffCmsMenu'];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/bff/comgate/status': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations['getBffComgateStatus'];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/bff/comgate/test-connection': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post: operations['postBffComgateTest-connection'];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/bff/customer/list': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations['getBffCustomerList'];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/bff/customer/detail': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations['getBffCustomerDetail'];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/bff/customer/detail-edit': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post: operations['postBffCustomerDetail-edit'];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/bff/customer/detail-credit': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations['getBffCustomerDetail-credit'];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/bff/customer/detail-sessions': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations['getBffCustomerDetail-sessions'];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/bff/customer/detail-password-log': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations['getBffCustomerDetail-password-log'];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/bff/customer/detail-security-info': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations['getBffCustomerDetail-security-info'];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/bff/customer/detail-address': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations['getBffCustomerDetail-address'];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/bff/customer/group-list': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations['getBffCustomerGroup-list'];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/bff/customer/set-password': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post: operations['postBffCustomerSet-password'];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/bff/customer/merge-customers': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post: operations['postBffCustomerMerge-customers'];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/bff/customer/invalidate-sessions': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post: operations['postBffCustomerInvalidate-sessions'];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/bff/customer/process-register-request': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post: operations['postBffCustomerProcess-register-request'];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/bff/customer/reset-password': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** @description Create a new reset password request and send verification mail to customer automatically. */
        post: operations['postBffCustomerReset-password'];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/bff/customer/process-set-password': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post: operations['postBffCustomerProcess-set-password'];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/bff/customer/add-credit-record': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post: operations['postBffCustomerAdd-credit-record'];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/bff/customer/generate-api-key': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post: operations['postBffCustomerGenerate-api-key'];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/bff/customer/workspace-list': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations['getBffCustomerWorkspace-list'];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/bff/customer/add-workspace': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post: operations['postBffCustomerAdd-workspace'];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/bff/customer/block-customer': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post: operations['postBffCustomerBlock-customer'];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/bff/customer/bulk-import': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post: operations['postBffCustomerBulk-import'];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/bff/dev/translate-dictionaries': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations['getBffDevTranslate-dictionaries'];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/bff/domain/list': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations['getBffDomainList'];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/bff/domain/show-verify-token': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations['getBffDomainShow-verify-token'];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/bff/domain/check-verify-token': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations['getBffDomainCheck-verify-token'];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/bff/domain/add': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post: operations['postBffDomainAdd'];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/bff/drive/list': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations['getBffDriveList'];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/bff/ecommerce/address/resolve-address-by-ico': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations['getBffEcommerceAddressResolve-address-by-ico'];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/bff/ecommerce/company/detail': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations['getBffEcommerceCompanyDetail'];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/bff/emailer/list': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations['getBffEmailerList'];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/bff/emailer/detail': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations['getBffEmailerDetail'];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/bff/emailer/detail-log-explain': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations['getBffEmailerDetail-log-explain'];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/bff/emailer/status': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations['getBffEmailerStatus'];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/bff/emailer/send-now': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations['getBffEmailerSend-now'];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/bff/emailer/send-again': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations['getBffEmailerSend-again'];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/bff/emailer/smtp-info': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations['getBffEmailerSmtp-info'];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/bff/emailer/setup-smtp': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post: operations['postBffEmailerSetup-smtp'];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/bff/emailer/statistics': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations['getBffEmailerStatistics'];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/bff/emailer/compose': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post: operations['postBffEmailerCompose'];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/bff/form/list': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations['getBffFormList'];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/bff/form/table': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations['getBffFormTable'];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/bff/form/structure': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations['getBffFormStructure'];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/bff/form/add': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post: operations['postBffFormAdd'];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/bff/form/update-structure': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post: operations['postBffFormUpdate-structure'];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/bff/form/add-field': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post: operations['postBffFormAdd-field'];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/bff/form/duplicate-field': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post: operations['postBffFormDuplicate-field'];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/bff/form/remove-field': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post: operations['postBffFormRemove-field'];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/bff/form/copy-form': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post: operations['postBffFormCopy-form'];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/bff/gopay/status': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations['getBffGopayStatus'];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/bff/gopay/test-connection': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post: operations['postBffGopayTest-connection'];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/bff/invoice/list': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations['getBffInvoiceList'];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/bff/iot/lock/lock-list': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations['getBffIotLockLock-list'];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/bff/iot/lock/lock-detail': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations['getBffIotLockLock-detail'];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/bff/iot/lock/lock-detail-refresh': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations['getBffIotLockLock-detail-refresh'];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/bff/iot/lock/lock-electric-quantity-list': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations['getBffIotLockLock-electric-quantity-list'];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/bff/iot/lock/unlock-now': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations['getBffIotLockUnlock-now'];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/bff/iot/lock/unlock-record-list': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations['getBffIotLockUnlock-record-list'];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/bff/iot/lock/lock-add': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post: operations['postBffIotLockLock-add'];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/bff/iot/lock/password-list': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations['getBffIotLockPassword-list'];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/bff/iot/lock/password-add': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post: operations['postBffIotLockPassword-add'];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/bff/iot/lock/password-delete': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations['getBffIotLockPassword-delete'];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/bff/member/list': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations['getBffMemberList'];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/bff/member/create': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post: operations['postBffMemberCreate'];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/bff/member/add-existing-user': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post: operations['postBffMemberAdd-existing-user'];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/bff/member/confirm-registration': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post: operations['postBffMemberConfirm-registration'];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/bff/member/block': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post: operations['postBffMemberBlock'];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/bff/network/refetch-dns': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations['getBffNetworkRefetch-dns'];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/bff/network/dns-search': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations['getBffNetworkDns-search'];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/bff/network/robots-txt': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations['getBffNetworkRobots-txt'];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/bff/network/ssl-certificate': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations['getBffNetworkSsl-certificate'];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/bff/network/subdomains': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations['getBffNetworkSubdomains'];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/bff/newsletter/list': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations['getBffNewsletterList'];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/bff/newsletter/job-list': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations['getBffNewsletterJob-list'];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/bff/newsletter/job-contact-list': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations['getBffNewsletterJob-contact-list'];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/bff/newsletter/job-statistics': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations['getBffNewsletterJob-statistics'];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/bff/newsletter/bulk-import': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post: operations['postBffNewsletterBulk-import'];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/bff/ip-info/detail': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations['getBffIp-infoDetail'];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/bff/locale/list': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations['getBffLocaleList'];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/bff/log/list': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations['getBffLogList'];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/bff/log/detail': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations['getBffLogDetail'];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/bff/log/detail-log-explain': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations['getBffLogDetail-log-explain'];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/bff/order/create': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post: operations['postBffOrderCreate'];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/bff/order/detail': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations['getBffOrderDetail'];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/bff/order/detail-recurrence': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations['getBffOrderDetail-recurrence'];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/bff/order/detail-file': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations['getBffOrderDetail-file'];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/bff/order/detail-log': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations['getBffOrderDetail-log'];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/bff/order/detail-log-explain': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations['getBffOrderDetail-log-explain'];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/bff/order/mark-as-paid': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post: operations['postBffOrderMark-as-paid'];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/bff/order/mark-as-non-paid': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post: operations['postBffOrderMark-as-non-paid'];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/bff/order/set-item-storno': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post: operations['postBffOrderSet-item-storno'];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/bff/order/remove-item': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post: operations['postBffOrderRemove-item'];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/bff/order/online-payment-grid': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations['getBffOrderOnline-payment-grid'];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/bff/order/create-payment': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post: operations['postBffOrderCreate-payment'];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/bff/order/resend-notification': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post: operations['postBffOrderResend-notification'];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/bff/order/update-notice': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post: operations['postBffOrderUpdate-notice'];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/bff/order/add-product': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post: operations['postBffOrderAdd-product'];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/bff/order/add-virtual-product': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post: operations['postBffOrderAdd-virtual-product'];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/bff/order/add-credit': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post: operations['postBffOrderAdd-credit'];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/bff/order/add-event': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post: operations['postBffOrderAdd-event'];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/bff/order/detail-recurrence-delete': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post: operations['postBffOrderDetail-recurrence-delete'];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/bff/order/create-invoice': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations['getBffOrderCreate-invoice'];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/bff/organisation/register': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post: operations['postBffOrganisationRegister'];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/bff/organisation/storage-usage': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations['getBffOrganisationStorage-usage'];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/bff/packeta/sync-branches': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations['getBffPacketaSync-branches'];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/bff/person/search': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations['getBffPersonSearch'];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/bff/post/static-page': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations['getBffPostStatic-page'];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/bff/product/list': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations['getBffProductList'];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/bff/product/product-detail': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations['getBffProductProduct-detail'];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/bff/product/price-history': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations['getBffProductPrice-history'];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/bff/product/search-related-products': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations['getBffProductSearch-related-products'];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/bff/product/product-detail-related': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations['getBffProductProduct-detail-related'];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/bff/product/connect-related-product': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post: operations['postBffProductConnect-related-product'];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/bff/product/disconnect-related-product': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post: operations['postBffProductDisconnect-related-product'];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/bff/product/search-product-list-autocomplete': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations['getBffProductSearch-product-list-autocomplete'];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/bff/product/search-product-variant-list': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations['getBffProductSearch-product-variant-list'];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/bff/product/connect-event': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post: operations['postBffProductConnect-event'];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/bff/product/disconnect-event': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post: operations['postBffProductDisconnect-event'];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/bff/product/product-variant-list': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations['getBffProductProduct-variant-list'];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/bff/product/update-variant': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post: operations['postBffProductUpdate-variant'];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/bff/product-category/list': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations['getBffProduct-categoryList'];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/bff/product-category/list-selectbox': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations['getBffProduct-categoryList-selectbox'];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/bff/product-category/category-detail': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations['getBffProduct-categoryCategory-detail'];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/bff/product-category/category-create': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post: operations['postBffProduct-categoryCategory-create'];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/bff/product-category/category-update': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post: operations['postBffProduct-categoryCategory-update'];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/bff/search/': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations['getBffSearch'];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/bff/search/user': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations['getBffSearchUser'];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/bff/settings/link-blob': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations['getBffSettingsLink-blob'];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/bff/settings/vat-rates': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations['getBffSettingsVat-rates'];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/bff/settings/env-variables': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations['getBffSettingsEnv-variables'];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/bff/settings/env-variable-value': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations['getBffSettingsEnv-variable-value'];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/bff/settings/env-change-variable-value': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post: operations['postBffSettingsEnv-change-variable-value'];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/bff/test/ping': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations['getBffTestPing'];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/bff/test/pdf': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations['getBffTestPdf'];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/bff/test/product-import-feed': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations['getBffTestProduct-import-feed'];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/bff/test/connect-import-feed': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations['getBffTestConnect-import-feed'];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/bff/test/nova': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations['getBffTestNova'];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/bff/test/maps': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations['getBffTestMaps'];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/bff/transaction/account-info': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations['getBffTransactionAccount-info'];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/bff/transaction/list': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations['getBffTransactionList'];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/bff/transaction/sync-all': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations['getBffTransactionSync-all'];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/bff/transaction/add-api-token': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post: operations['postBffTransactionAdd-api-token'];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/bff/workflow/status': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations['getBffWorkflowStatus'];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/bff/workflow/add-status': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post: operations['postBffWorkflowAdd-status'];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/bff/workflow/update': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post: operations['postBffWorkflowUpdate'];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/bff/workflow/set-status-position': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post: operations['postBffWorkflowSet-status-position'];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
}
export type webhooks = Record<string, never>;
export interface components {
    schemas: never;
    responses: never;
    parameters: never;
    requestBodies: never;
    headers: never;
    pathItems: never;
}
export type $defs = Record<string, never>;
export interface operations {
    'postApiV1CalendarAdd-event': {
        parameters: {
            query: {
                apiKey: string;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                'application/json': {
                    event: {
                        calendarId: string;
                        /** Format: date-time */
                        startTime: string;
                        /** Format: date-time */
                        endTime: string;
                        title: string;
                        /** @description Enter details for this event. */
                        description?: string;
                        /** @description List the main points of the meeting. Other members can edit this agenda. */
                        agenda?: string;
                        url?: string;
                        /** @description Send a e-mail notification to attendees. */
                        notifyBefore?: string;
                        /**
                         * Format: date-time
                         * @description Keep reservation calendar slot blocked until this time. Blocking event will create a conflict with other events in same time slot.
                         */
                        blockingTo?: string;
                        locationTitle?: string;
                        locationAddress?: string;
                        periodString?: string;
                        /**
                         * @description All day event will change startTime to 00:00:00 and endTime to 23:59:59.
                         * @default false
                         */
                        isAllDay?: boolean;
                        /**
                         * @description Blocking event will create a conflict with other events in same time slot.
                         * @default true
                         */
                        isBlocking?: boolean;
                        attendees?: {
                            memberId?: number;
                            customerId?: number;
                            name: string;
                            email?: string;
                            phone?: string;
                        }[];
                        type?: string;
                    };
                };
                'multipart/form-data': {
                    event: {
                        calendarId: string;
                        /** Format: date-time */
                        startTime: string;
                        /** Format: date-time */
                        endTime: string;
                        title: string;
                        /** @description Enter details for this event. */
                        description?: string;
                        /** @description List the main points of the meeting. Other members can edit this agenda. */
                        agenda?: string;
                        url?: string;
                        /** @description Send a e-mail notification to attendees. */
                        notifyBefore?: string;
                        /**
                         * Format: date-time
                         * @description Keep reservation calendar slot blocked until this time. Blocking event will create a conflict with other events in same time slot.
                         */
                        blockingTo?: string;
                        locationTitle?: string;
                        locationAddress?: string;
                        periodString?: string;
                        /**
                         * @description All day event will change startTime to 00:00:00 and endTime to 23:59:59.
                         * @default false
                         */
                        isAllDay?: boolean;
                        /**
                         * @description Blocking event will create a conflict with other events in same time slot.
                         * @default true
                         */
                        isBlocking?: boolean;
                        attendees?: {
                            memberId?: number;
                            customerId?: number;
                            name: string;
                            email?: string;
                            phone?: string;
                        }[];
                        type?: string;
                    };
                };
                'text/plain': {
                    event: {
                        calendarId: string;
                        /** Format: date-time */
                        startTime: string;
                        /** Format: date-time */
                        endTime: string;
                        title: string;
                        /** @description Enter details for this event. */
                        description?: string;
                        /** @description List the main points of the meeting. Other members can edit this agenda. */
                        agenda?: string;
                        url?: string;
                        /** @description Send a e-mail notification to attendees. */
                        notifyBefore?: string;
                        /**
                         * Format: date-time
                         * @description Keep reservation calendar slot blocked until this time. Blocking event will create a conflict with other events in same time slot.
                         */
                        blockingTo?: string;
                        locationTitle?: string;
                        locationAddress?: string;
                        periodString?: string;
                        /**
                         * @description All day event will change startTime to 00:00:00 and endTime to 23:59:59.
                         * @default false
                         */
                        isAllDay?: boolean;
                        /**
                         * @description Blocking event will create a conflict with other events in same time slot.
                         * @default true
                         */
                        isBlocking?: boolean;
                        attendees?: {
                            memberId?: number;
                            customerId?: number;
                            name: string;
                            email?: string;
                            phone?: string;
                        }[];
                        type?: string;
                    };
                };
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': {
                        eventId: string;
                    };
                    'multipart/form-data': {
                        eventId: string;
                    };
                    'text/plain': {
                        eventId: string;
                    };
                };
            };
        };
    };
    getApiV1CalendarDetail: {
        parameters: {
            query: {
                apiKey: string;
                code: string;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': {
                        name: string;
                        color: string;
                        timezone: string;
                        configuration: {
                            description?: string;
                            onlineChangeDeadline: string;
                            relatedCalendarIds: string[];
                            reserveFrom: string;
                            reserveUntil: string;
                            timeSlotInterval: string;
                        };
                    };
                    'multipart/form-data': {
                        name: string;
                        color: string;
                        timezone: string;
                        configuration: {
                            description?: string;
                            onlineChangeDeadline: string;
                            relatedCalendarIds: string[];
                            reserveFrom: string;
                            reserveUntil: string;
                            timeSlotInterval: string;
                        };
                    };
                    'text/plain': {
                        name: string;
                        color: string;
                        timezone: string;
                        configuration: {
                            description?: string;
                            onlineChangeDeadline: string;
                            relatedCalendarIds: string[];
                            reserveFrom: string;
                            reserveUntil: string;
                            timeSlotInterval: string;
                        };
                    };
                };
            };
        };
    };
    'postApiV1CalendarEvent-find-conflict': {
        parameters: {
            query: {
                apiKey: string;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    'getApiV1CalendarEvent-list': {
        parameters: {
            query: {
                apiKey: string;
                code: string;
                selectorFrom?: string;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    'getApiV1CalendarScheduling-assistant': {
        parameters: {
            query: {
                apiKey: string;
                code: string;
                startTime: string;
                endTime: string;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    getApiV1CalendarTimezones: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': {
                        clientTimezone: string;
                        items: {
                            id: string;
                            timezone: string;
                            gmt: string;
                            label: string;
                        }[];
                    };
                    'multipart/form-data': {
                        clientTimezone: string;
                        items: {
                            id: string;
                            timezone: string;
                            gmt: string;
                            label: string;
                        }[];
                    };
                    'text/plain': {
                        clientTimezone: string;
                        items: {
                            id: string;
                            timezone: string;
                            gmt: string;
                            label: string;
                        }[];
                    };
                };
            };
        };
    };
    getApiV1CartDetail: {
        parameters: {
            query: {
                apiKey: string;
                cartId?: string;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': {
                        id: string;
                        customerId?: string;
                        customerName?: string;
                        customerEmail?: string;
                        currency: string;
                        priceTotal: number;
                        deliveryCode?: string;
                        deliveryBranchId?: number;
                        deliveryBranchProvider?: string;
                        paymentCode?: string;
                        deliveryList: {
                            name: string;
                            code: string;
                            description?: string;
                            price: number;
                            active: boolean;
                            selected?: boolean;
                        }[];
                        paymentList: {
                            name: string;
                            code: string;
                            description?: string;
                            price: number;
                            active: boolean;
                            selected?: boolean;
                        }[];
                        deliveryAndPaymentCombinations: {
                            deliveryCode: string;
                            paymentCode: string;
                        }[];
                        items: {
                            id: string;
                            label: string;
                            mainImageUrl?: string;
                            productCode: string;
                            productSlug: string;
                            variantCode?: string;
                            price: {
                                /** @description Cena s DPH. */
                                priceWithVat: number;
                                /** @description Měna ceny. */
                                currency: string;
                                /** @description Cena bez DPH. */
                                priceWithoutVat: number;
                                /** @description Výše DPH v procentech. */
                                vat: number;
                                /** @description Místní označení měny. */
                                currencyLocale: string;
                            };
                            quantity: number;
                        }[];
                    };
                    'multipart/form-data': {
                        id: string;
                        customerId?: string;
                        customerName?: string;
                        customerEmail?: string;
                        currency: string;
                        priceTotal: number;
                        deliveryCode?: string;
                        deliveryBranchId?: number;
                        deliveryBranchProvider?: string;
                        paymentCode?: string;
                        deliveryList: {
                            name: string;
                            code: string;
                            description?: string;
                            price: number;
                            active: boolean;
                            selected?: boolean;
                        }[];
                        paymentList: {
                            name: string;
                            code: string;
                            description?: string;
                            price: number;
                            active: boolean;
                            selected?: boolean;
                        }[];
                        deliveryAndPaymentCombinations: {
                            deliveryCode: string;
                            paymentCode: string;
                        }[];
                        items: {
                            id: string;
                            label: string;
                            mainImageUrl?: string;
                            productCode: string;
                            productSlug: string;
                            variantCode?: string;
                            price: {
                                /** @description Cena s DPH. */
                                priceWithVat: number;
                                /** @description Měna ceny. */
                                currency: string;
                                /** @description Cena bez DPH. */
                                priceWithoutVat: number;
                                /** @description Výše DPH v procentech. */
                                vat: number;
                                /** @description Místní označení měny. */
                                currencyLocale: string;
                            };
                            quantity: number;
                        }[];
                    };
                    'text/plain': {
                        id: string;
                        customerId?: string;
                        customerName?: string;
                        customerEmail?: string;
                        currency: string;
                        priceTotal: number;
                        deliveryCode?: string;
                        deliveryBranchId?: number;
                        deliveryBranchProvider?: string;
                        paymentCode?: string;
                        deliveryList: {
                            name: string;
                            code: string;
                            description?: string;
                            price: number;
                            active: boolean;
                            selected?: boolean;
                        }[];
                        paymentList: {
                            name: string;
                            code: string;
                            description?: string;
                            price: number;
                            active: boolean;
                            selected?: boolean;
                        }[];
                        deliveryAndPaymentCombinations: {
                            deliveryCode: string;
                            paymentCode: string;
                        }[];
                        items: {
                            id: string;
                            label: string;
                            mainImageUrl?: string;
                            productCode: string;
                            productSlug: string;
                            variantCode?: string;
                            price: {
                                /** @description Cena s DPH. */
                                priceWithVat: number;
                                /** @description Měna ceny. */
                                currency: string;
                                /** @description Cena bez DPH. */
                                priceWithoutVat: number;
                                /** @description Výše DPH v procentech. */
                                vat: number;
                                /** @description Místní označení měny. */
                                currencyLocale: string;
                            };
                            quantity: number;
                        }[];
                    };
                };
            };
        };
    };
    postApiV1CartBuy: {
        parameters: {
            query: {
                apiKey: string;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                'application/json': {
                    cartId: string;
                    /** @description Use customer identity cookies value when is logged in. */
                    identityId?: string;
                    quantity?: number;
                    productCode: string;
                    productVariantCode?: string;
                };
                'multipart/form-data': {
                    cartId: string;
                    /** @description Use customer identity cookies value when is logged in. */
                    identityId?: string;
                    quantity?: number;
                    productCode: string;
                    productVariantCode?: string;
                };
                'text/plain': {
                    cartId: string;
                    /** @description Use customer identity cookies value when is logged in. */
                    identityId?: string;
                    quantity?: number;
                    productCode: string;
                    productVariantCode?: string;
                };
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': {
                        /** @constant */
                        success: true;
                    };
                    'multipart/form-data': {
                        /** @constant */
                        success: true;
                    };
                    'text/plain': {
                        /** @constant */
                        success: true;
                    };
                };
            };
        };
    };
    'postApiV1CartChange-quantity': {
        parameters: {
            query: {
                apiKey: string;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                'application/json': {
                    cartId: string;
                    itemId: string;
                    /** @description Set product quantity. Use `0` to remove item from cart. */
                    quantity: number;
                };
                'multipart/form-data': {
                    cartId: string;
                    itemId: string;
                    /** @description Set product quantity. Use `0` to remove item from cart. */
                    quantity: number;
                };
                'text/plain': {
                    cartId: string;
                    itemId: string;
                    /** @description Set product quantity. Use `0` to remove item from cart. */
                    quantity: number;
                };
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': {
                        /** @constant */
                        success: true;
                    };
                    'multipart/form-data': {
                        /** @constant */
                        success: true;
                    };
                    'text/plain': {
                        /** @constant */
                        success: true;
                    };
                };
            };
        };
    };
    'postApiV1CartSet-delivery': {
        parameters: {
            query: {
                apiKey: string;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                'application/json': {
                    cartId: string;
                    deliveryCode: string;
                };
                'multipart/form-data': {
                    cartId: string;
                    deliveryCode: string;
                };
                'text/plain': {
                    cartId: string;
                    deliveryCode: string;
                };
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': {
                        /** @constant */
                        success: true;
                    };
                    'multipart/form-data': {
                        /** @constant */
                        success: true;
                    };
                    'text/plain': {
                        /** @constant */
                        success: true;
                    };
                };
            };
        };
    };
    'postApiV1CartSet-payment': {
        parameters: {
            query: {
                apiKey: string;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                'application/json': {
                    cartId: string;
                    paymentCode: string;
                };
                'multipart/form-data': {
                    cartId: string;
                    paymentCode: string;
                };
                'text/plain': {
                    cartId: string;
                    paymentCode: string;
                };
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': {
                        /** @constant */
                        success: true;
                    };
                    'multipart/form-data': {
                        /** @constant */
                        success: true;
                    };
                    'text/plain': {
                        /** @constant */
                        success: true;
                    };
                };
            };
        };
    };
    'postApiV1CartSet-packeta-branch': {
        parameters: {
            query: {
                apiKey: string;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                'application/json': {
                    cartId: string;
                    packetaBranchId: number;
                };
                'multipart/form-data': {
                    cartId: string;
                    packetaBranchId: number;
                };
                'text/plain': {
                    cartId: string;
                    packetaBranchId: number;
                };
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': {
                        /** @constant */
                        success: true;
                    };
                    'multipart/form-data': {
                        /** @constant */
                        success: true;
                    };
                    'text/plain': {
                        /** @constant */
                        success: true;
                    };
                };
            };
        };
    };
    'postApiV1CustomerCreate-api-key': {
        parameters: {
            query: {
                apiKey: string;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                'application/json': {
                    /** @description Logged user identity (from your frontend cookies). */
                    identityId: string;
                    description?: string;
                    workspaceCode?: string;
                    customerRealIp?: string;
                };
                'multipart/form-data': {
                    /** @description Logged user identity (from your frontend cookies). */
                    identityId: string;
                    description?: string;
                    workspaceCode?: string;
                    customerRealIp?: string;
                };
                'text/plain': {
                    /** @description Logged user identity (from your frontend cookies). */
                    identityId: string;
                    description?: string;
                    workspaceCode?: string;
                    customerRealIp?: string;
                };
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': {
                        /** @constant */
                        success: true;
                        apiKey: string;
                        expirationDate: Record<string, never> | string | number;
                    };
                    'multipart/form-data': {
                        /** @constant */
                        success: true;
                        apiKey: string;
                        expirationDate: Record<string, never> | string | number;
                    };
                    'text/plain': {
                        /** @constant */
                        success: true;
                        apiKey: string;
                        expirationDate: Record<string, never> | string | number;
                    };
                };
            };
        };
    };
    'getApiV1CustomerCredit-log': {
        parameters: {
            query: {
                apiKey: string;
                /** @description Logged user identity (from your frontend cookies). */
                identityId: string;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': {
                        creditBalance: number;
                        items: {
                            id: string;
                            amount: number;
                            balance: number;
                            order?: {
                                orderNumber: string;
                                hash: string;
                                groupName: string;
                            };
                            description?: string;
                            /** @description Date and time of credit record. */
                            insertedDate: Record<string, never> | string | number;
                        }[];
                    };
                    'multipart/form-data': {
                        creditBalance: number;
                        items: {
                            id: string;
                            amount: number;
                            balance: number;
                            order?: {
                                orderNumber: string;
                                hash: string;
                                groupName: string;
                            };
                            description?: string;
                            /** @description Date and time of credit record. */
                            insertedDate: Record<string, never> | string | number;
                        }[];
                    };
                    'text/plain': {
                        creditBalance: number;
                        items: {
                            id: string;
                            amount: number;
                            balance: number;
                            order?: {
                                orderNumber: string;
                                hash: string;
                                groupName: string;
                            };
                            description?: string;
                            /** @description Date and time of credit record. */
                            insertedDate: Record<string, never> | string | number;
                        }[];
                    };
                };
            };
        };
    };
    'postApiV1CustomerCredit-spend': {
        parameters: {
            query: {
                apiKey: string;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                'application/json': {
                    /** @description Logged user identity (from your frontend cookies). */
                    identityId: string;
                    amount: number;
                    /** @description App internal description. */
                    description?: string;
                    customerRealIp?: string;
                };
                'multipart/form-data': {
                    /** @description Logged user identity (from your frontend cookies). */
                    identityId: string;
                    amount: number;
                    /** @description App internal description. */
                    description?: string;
                    customerRealIp?: string;
                };
                'text/plain': {
                    /** @description Logged user identity (from your frontend cookies). */
                    identityId: string;
                    amount: number;
                    /** @description App internal description. */
                    description?: string;
                    customerRealIp?: string;
                };
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': {
                        /** @constant */
                        success: true;
                        /** @description Unique transaction id (for example `HxanU4a1n4El61zx`). In case of `amount = 0` transactionId is `xxxxxxxxxxxxxxxx`. */
                        transactionId: string;
                        oldCreditBalance: number;
                        newCreditBalance: number;
                    };
                    'multipart/form-data': {
                        /** @constant */
                        success: true;
                        /** @description Unique transaction id (for example `HxanU4a1n4El61zx`). In case of `amount = 0` transactionId is `xxxxxxxxxxxxxxxx`. */
                        transactionId: string;
                        oldCreditBalance: number;
                        newCreditBalance: number;
                    };
                    'text/plain': {
                        /** @constant */
                        success: true;
                        /** @description Unique transaction id (for example `HxanU4a1n4El61zx`). In case of `amount = 0` transactionId is `xxxxxxxxxxxxxxxx`. */
                        transactionId: string;
                        oldCreditBalance: number;
                        newCreditBalance: number;
                    };
                };
            };
        };
    };
    'postApiV1CustomerCustomer-match-customer': {
        parameters: {
            query: {
                apiKey: string;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                'application/json': {
                    /** @description Owner of relation. */
                    managerCuRefNo: string;
                    /** @description Customer of relation. */
                    customerCuRefNo?: string;
                    customerEmail?: string;
                    /** @description A public note for this connection. The note will be visible to both customers. For example, a trainer can write information about a new client here. */
                    notice?: string;
                };
                'multipart/form-data': {
                    /** @description Owner of relation. */
                    managerCuRefNo: string;
                    /** @description Customer of relation. */
                    customerCuRefNo?: string;
                    customerEmail?: string;
                    /** @description A public note for this connection. The note will be visible to both customers. For example, a trainer can write information about a new client here. */
                    notice?: string;
                };
                'text/plain': {
                    /** @description Owner of relation. */
                    managerCuRefNo: string;
                    /** @description Customer of relation. */
                    customerCuRefNo?: string;
                    customerEmail?: string;
                    /** @description A public note for this connection. The note will be visible to both customers. For example, a trainer can write information about a new client here. */
                    notice?: string;
                };
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': {
                        /** @constant */
                        success: true;
                    };
                    'multipart/form-data': {
                        /** @constant */
                        success: true;
                    };
                    'text/plain': {
                        /** @constant */
                        success: true;
                    };
                };
            };
        };
    };
    getApiV1CustomerDetail: {
        parameters: {
            query: {
                apiKey: string;
                /** @description Logged user identity (from your frontend cookies). */
                identityId: string;
                cuRefNo: string;
                customerRealIp?: string;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    'getApiV1CustomerGet-account-info': {
        parameters: {
            query: {
                apiKey: string;
                /** @description Logged user identity (from your frontend cookies). */
                identityId: string;
                customerRealIp?: string;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    postApiV1CustomerLogin: {
        parameters: {
            query: {
                apiKey: string;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                'application/json': {
                    email: string;
                    password: string;
                    customerRealIp?: string;
                };
                'multipart/form-data': {
                    email: string;
                    password: string;
                    customerRealIp?: string;
                };
                'text/plain': {
                    email: string;
                    password: string;
                    customerRealIp?: string;
                };
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json':
                        | {
                              /** @constant */
                              success: true;
                              identityId: string;
                          }
                        | {
                              /** @constant */
                              success: false;
                              errorCode: string;
                              message: string;
                          };
                    'multipart/form-data':
                        | {
                              /** @constant */
                              success: true;
                              identityId: string;
                          }
                        | {
                              /** @constant */
                              success: false;
                              errorCode: string;
                              message: string;
                          };
                    'text/plain':
                        | {
                              /** @constant */
                              success: true;
                              identityId: string;
                          }
                        | {
                              /** @constant */
                              success: false;
                              errorCode: string;
                              message: string;
                          };
                };
            };
        };
    };
    postApiV1CustomerLogout: {
        parameters: {
            query: {
                apiKey: string;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                'application/json': {
                    /** @description Logged user identity (from your frontend cookies). */
                    identityId: string;
                    customerRealIp?: string;
                };
                'multipart/form-data': {
                    /** @description Logged user identity (from your frontend cookies). */
                    identityId: string;
                    customerRealIp?: string;
                };
                'text/plain': {
                    /** @description Logged user identity (from your frontend cookies). */
                    identityId: string;
                    customerRealIp?: string;
                };
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': {
                        /** @default true */
                        success: boolean;
                    };
                    'multipart/form-data': {
                        /** @default true */
                        success: boolean;
                    };
                    'text/plain': {
                        /** @default true */
                        success: boolean;
                    };
                };
            };
        };
    };
    'postApiV1CustomerMagic-auth': {
        parameters: {
            query: {
                apiKey: string;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                'application/json': {
                    email: string;
                    firstName?: string;
                    lastName?: string;
                    customerRealIp?: string;
                    referralId?: string;
                };
                'multipart/form-data': {
                    email: string;
                    firstName?: string;
                    lastName?: string;
                    customerRealIp?: string;
                    referralId?: string;
                };
                'text/plain': {
                    email: string;
                    firstName?: string;
                    lastName?: string;
                    customerRealIp?: string;
                    referralId?: string;
                };
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json':
                        | {
                              /** @constant */
                              success: true;
                              /** @description New created user identity, please store it to your frontend cookies. */
                              identityId: string;
                          }
                        | {
                              /** @constant */
                              success: false;
                              errorCode: string;
                              message: string;
                          };
                    'multipart/form-data':
                        | {
                              /** @constant */
                              success: true;
                              /** @description New created user identity, please store it to your frontend cookies. */
                              identityId: string;
                          }
                        | {
                              /** @constant */
                              success: false;
                              errorCode: string;
                              message: string;
                          };
                    'text/plain':
                        | {
                              /** @constant */
                              success: true;
                              /** @description New created user identity, please store it to your frontend cookies. */
                              identityId: string;
                          }
                        | {
                              /** @constant */
                              success: false;
                              errorCode: string;
                              message: string;
                          };
                };
            };
        };
    };
    'getApiV1CustomerMatched-customer-list': {
        parameters: {
            query: {
                apiKey: string;
                /** @description Logged user identity (from your frontend cookies). */
                identityId: string;
                query?: string;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    'getApiV1CustomerOrder-list': {
        parameters: {
            query: {
                apiKey: string;
                /** @description Logged user identity (from your frontend cookies). */
                identityId: string;
                page?: string;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': {
                        items: {
                            id: string;
                            orderNumber: string;
                            status: {
                                label: string;
                                code: string;
                                backgroundColor: string;
                                textColor: string;
                            };
                            price: string;
                            sale: string;
                            notice?: string;
                            insertedDate: Record<string, never> | string | number;
                            updatedDate: Record<string, never> | string | number;
                            expirationDate?: Record<string, never> | string | number;
                            lines: {
                                id: string;
                                label: string;
                                count: number;
                                /** @default false */
                                storno: boolean;
                                price: string;
                                sale: string;
                                unit?: string;
                                vat?: number;
                                creditAmount?: number;
                                insertedDate: Record<string, never> | string | number;
                                event?: {
                                    id: string;
                                    startTime: Record<string, never> | string | number;
                                    endTime: Record<string, never> | string | number;
                                    title?: string;
                                    /** @default false */
                                    isAllDay: boolean;
                                    /** @default true */
                                    isBlocking: boolean;
                                    /** @default true */
                                    isStorno: boolean;
                                };
                            }[];
                        }[];
                    };
                    'multipart/form-data': {
                        items: {
                            id: string;
                            orderNumber: string;
                            status: {
                                label: string;
                                code: string;
                                backgroundColor: string;
                                textColor: string;
                            };
                            price: string;
                            sale: string;
                            notice?: string;
                            insertedDate: Record<string, never> | string | number;
                            updatedDate: Record<string, never> | string | number;
                            expirationDate?: Record<string, never> | string | number;
                            lines: {
                                id: string;
                                label: string;
                                count: number;
                                /** @default false */
                                storno: boolean;
                                price: string;
                                sale: string;
                                unit?: string;
                                vat?: number;
                                creditAmount?: number;
                                insertedDate: Record<string, never> | string | number;
                                event?: {
                                    id: string;
                                    startTime: Record<string, never> | string | number;
                                    endTime: Record<string, never> | string | number;
                                    title?: string;
                                    /** @default false */
                                    isAllDay: boolean;
                                    /** @default true */
                                    isBlocking: boolean;
                                    /** @default true */
                                    isStorno: boolean;
                                };
                            }[];
                        }[];
                    };
                    'text/plain': {
                        items: {
                            id: string;
                            orderNumber: string;
                            status: {
                                label: string;
                                code: string;
                                backgroundColor: string;
                                textColor: string;
                            };
                            price: string;
                            sale: string;
                            notice?: string;
                            insertedDate: Record<string, never> | string | number;
                            updatedDate: Record<string, never> | string | number;
                            expirationDate?: Record<string, never> | string | number;
                            lines: {
                                id: string;
                                label: string;
                                count: number;
                                /** @default false */
                                storno: boolean;
                                price: string;
                                sale: string;
                                unit?: string;
                                vat?: number;
                                creditAmount?: number;
                                insertedDate: Record<string, never> | string | number;
                                event?: {
                                    id: string;
                                    startTime: Record<string, never> | string | number;
                                    endTime: Record<string, never> | string | number;
                                    title?: string;
                                    /** @default false */
                                    isAllDay: boolean;
                                    /** @default true */
                                    isBlocking: boolean;
                                    /** @default true */
                                    isStorno: boolean;
                                };
                            }[];
                        }[];
                    };
                };
            };
        };
    };
    'postApiV1CustomerRegister-account': {
        parameters: {
            query: {
                apiKey: string;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                'application/json': {
                    password: string;
                    returnUrl?: string;
                    email: string;
                    name?: string;
                    firstName?: string;
                    lastName?: string;
                    phone?: string;
                    companyName?: string;
                    companyRegistrationNumber?: string;
                    taxIdentificationNumber?: string;
                    streetAddress?: string;
                    city?: string;
                    cityPart?: string;
                    stateRegion?: string;
                    postalCode?: string;
                    country?: string;
                    newsletter?: boolean;
                    primaryLocale?: string;
                    groups?: string[];
                    customerRealIp?: string;
                    referralId?: string;
                };
                'multipart/form-data': {
                    password: string;
                    returnUrl?: string;
                    email: string;
                    name?: string;
                    firstName?: string;
                    lastName?: string;
                    phone?: string;
                    companyName?: string;
                    companyRegistrationNumber?: string;
                    taxIdentificationNumber?: string;
                    streetAddress?: string;
                    city?: string;
                    cityPart?: string;
                    stateRegion?: string;
                    postalCode?: string;
                    country?: string;
                    newsletter?: boolean;
                    primaryLocale?: string;
                    groups?: string[];
                    customerRealIp?: string;
                    referralId?: string;
                };
                'text/plain': {
                    password: string;
                    returnUrl?: string;
                    email: string;
                    name?: string;
                    firstName?: string;
                    lastName?: string;
                    phone?: string;
                    companyName?: string;
                    companyRegistrationNumber?: string;
                    taxIdentificationNumber?: string;
                    streetAddress?: string;
                    city?: string;
                    cityPart?: string;
                    stateRegion?: string;
                    postalCode?: string;
                    country?: string;
                    newsletter?: boolean;
                    primaryLocale?: string;
                    groups?: string[];
                    customerRealIp?: string;
                    referralId?: string;
                };
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json':
                        | {
                              /** @constant */
                              success: true;
                          }
                        | {
                              /** @constant */
                              success: false;
                              errorCode: string;
                              message: string;
                          };
                    'multipart/form-data':
                        | {
                              /** @constant */
                              success: true;
                          }
                        | {
                              /** @constant */
                              success: false;
                              errorCode: string;
                              message: string;
                          };
                    'text/plain':
                        | {
                              /** @constant */
                              success: true;
                          }
                        | {
                              /** @constant */
                              success: false;
                              errorCode: string;
                              message: string;
                          };
                };
            };
        };
    };
    'postApiV1CustomerRegister-account-verify': {
        parameters: {
            query: {
                apiKey: string;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                'application/json': {
                    token: string;
                };
                'multipart/form-data': {
                    token: string;
                };
                'text/plain': {
                    token: string;
                };
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': {
                        success: boolean;
                        email: string;
                        returnUrl?: string;
                    };
                    'multipart/form-data': {
                        success: boolean;
                        email: string;
                        returnUrl?: string;
                    };
                    'text/plain': {
                        success: boolean;
                        email: string;
                        returnUrl?: string;
                    };
                };
            };
        };
    };
    'postApiV1CustomerReset-password': {
        parameters: {
            query: {
                apiKey: string;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                'application/json': {
                    email: string;
                    expirationTime?: string;
                    customerRealIp?: string;
                };
                'multipart/form-data': {
                    email: string;
                    expirationTime?: string;
                    customerRealIp?: string;
                };
                'text/plain': {
                    email: string;
                    expirationTime?: string;
                    customerRealIp?: string;
                };
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': {
                        /** @constant */
                        success: true;
                    };
                    'multipart/form-data': {
                        /** @constant */
                        success: true;
                    };
                    'text/plain': {
                        /** @constant */
                        success: true;
                    };
                };
            };
        };
    };
    'postApiV1CustomerSet-new-password': {
        parameters: {
            query: {
                apiKey: string;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                'application/json': {
                    /** @description System one time token given from user verification e-mail. */
                    token: string;
                    password: string;
                    customerRealIp?: string;
                };
                'multipart/form-data': {
                    /** @description System one time token given from user verification e-mail. */
                    token: string;
                    password: string;
                    customerRealIp?: string;
                };
                'text/plain': {
                    /** @description System one time token given from user verification e-mail. */
                    token: string;
                    password: string;
                    customerRealIp?: string;
                };
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json':
                        | {
                              /** @constant */
                              success: true;
                          }
                        | {
                              /** @constant */
                              success: false;
                              errorCode: string;
                              message: string;
                          };
                    'multipart/form-data':
                        | {
                              /** @constant */
                              success: true;
                          }
                        | {
                              /** @constant */
                              success: false;
                              errorCode: string;
                              message: string;
                          };
                    'text/plain':
                        | {
                              /** @constant */
                              success: true;
                          }
                        | {
                              /** @constant */
                              success: false;
                              errorCode: string;
                              message: string;
                          };
                };
            };
        };
    };
    postApiV1EmailerSend: {
        parameters: {
            query: {
                apiKey: string;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                'application/json': {
                    subject: string;
                    from: string;
                    to: string;
                    cc?: string;
                    bcc?: string;
                    replyTo?: string;
                    priority?: number;
                    note?: string;
                    htmlBody?: string;
                    tag?: string;
                    forceSendNow?: boolean;
                };
                'multipart/form-data': {
                    subject: string;
                    from: string;
                    to: string;
                    cc?: string;
                    bcc?: string;
                    replyTo?: string;
                    priority?: number;
                    note?: string;
                    htmlBody?: string;
                    tag?: string;
                    forceSendNow?: boolean;
                };
                'text/plain': {
                    subject: string;
                    from: string;
                    to: string;
                    cc?: string;
                    bcc?: string;
                    replyTo?: string;
                    priority?: number;
                    note?: string;
                    htmlBody?: string;
                    tag?: string;
                    forceSendNow?: boolean;
                };
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': {
                        /** @constant */
                        success: true;
                    };
                    'multipart/form-data': {
                        /** @constant */
                        success: true;
                    };
                    'text/plain': {
                        /** @constant */
                        success: true;
                    };
                };
            };
        };
    };
    getApiV1FormDetail: {
        parameters: {
            query: {
                apiKey: string;
                code?: string;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': {
                        id: string;
                        name: string;
                        description?: string;
                        fields: {
                            key: string;
                            type: string;
                            label: string;
                            helperText?: string;
                            required: boolean;
                            defaultValue?: string;
                            options?: Record<string, never>;
                        }[];
                    };
                    'multipart/form-data': {
                        id: string;
                        name: string;
                        description?: string;
                        fields: {
                            key: string;
                            type: string;
                            label: string;
                            helperText?: string;
                            required: boolean;
                            defaultValue?: string;
                            options?: Record<string, never>;
                        }[];
                    };
                    'text/plain': {
                        id: string;
                        name: string;
                        description?: string;
                        fields: {
                            key: string;
                            type: string;
                            label: string;
                            helperText?: string;
                            required: boolean;
                            defaultValue?: string;
                            options?: Record<string, never>;
                        }[];
                    };
                };
            };
        };
    };
    'postApiV1NewsletterRegister-contact': {
        parameters: {
            query: {
                apiKey: string;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                'application/json': {
                    email: string;
                    source?: string;
                    groups?: string[];
                };
                'multipart/form-data': {
                    email: string;
                    source?: string;
                    groups?: string[];
                };
                'text/plain': {
                    email: string;
                    source?: string;
                    groups?: string[];
                };
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': {
                        /** @constant */
                        success: true;
                    };
                    'multipart/form-data': {
                        /** @constant */
                        success: true;
                    };
                    'text/plain': {
                        /** @constant */
                        success: true;
                    };
                };
            };
        };
    };
    getApiV1Ping: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    getApiV1PingError: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    getApiV1ProductDetail: {
        parameters: {
            query: {
                apiKey: string;
                slug: string;
                /** @description Add extra on demand properties separated by semicolon.
                 *
                 *     Supported values:
                 *
                 *     | Property | Description |
                 *     |----------|-------------|
                 *     | `orderStatistics` | Extra statistics data like `totalQuantitySold` and count of orders in states. |
                 *     | `galleryItemsCount` | Count of public images in product detail. | */
                properties?: string;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    getApiV1ProductFeed: {
        parameters: {
            query: {
                apiKey: string;
                /** @description Search query */
                query?: string;
                /** @description Order by indexed internal field.
                 *
                 *     Supported values: `position`, `eventDate`. */
                orderBy?: string;
                /** @description Filter products from category by slug. */
                category?: string;
                page?: string;
                limit?: string;
                /** @description Add extra on demand properties separated by semicolon.
                 *
                 *     Supported values:
                 *
                 *     | Property | Description |
                 *     |----------|-------------|
                 *     | `orderStatistics` | Extra statistics data like `totalQuantitySold` and count of orders in states. |
                 *     | `galleryItemsCount` | Count of public images in product detail. | */
                properties?: string;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': {
                        count: number;
                        items: {
                            id: number;
                            name: string;
                            slug: string;
                            shortDescription?: string;
                            mainImageUrl?: string;
                            mainCategory?: {
                                slug: string;
                                code: string;
                                name: string;
                            };
                            price: number;
                            position: number;
                            active: boolean;
                            soldOut: boolean;
                            warehouseAllQuantity?: number;
                            warehouseLimit?: number;
                            customFields: Record<string, never>;
                            event?: {
                                id: string;
                                startTime: Record<string, never> | string | number;
                                endTime: Record<string, never> | string | number;
                                /**
                                 * @description All day event will change startTime to 00:00:00 and endTime to 23:59:59.
                                 * @default false
                                 */
                                isAllDay: boolean;
                                /**
                                 * @description Blocking event will create a conflict with other events in same time slot.
                                 * @default true
                                 */
                                isBlocking: boolean;
                                title: string;
                                /** @description Enter details for this event. */
                                description?: string;
                                /** @description List the main points of the meeting. Other members can edit this agenda. */
                                agenda?: string;
                                url?: string;
                                locationTitle?: string;
                            };
                            advance?: {
                                relatedCustomers: string[];
                            };
                            orderStatistics?: {
                                totalQuantitySold: number;
                                statusNew: number;
                                statusProcessing: number;
                                statusStorno: number;
                                statusDone: number;
                            };
                            galleryItemsCount?: number;
                        }[];
                    };
                    'multipart/form-data': {
                        count: number;
                        items: {
                            id: number;
                            name: string;
                            slug: string;
                            shortDescription?: string;
                            mainImageUrl?: string;
                            mainCategory?: {
                                slug: string;
                                code: string;
                                name: string;
                            };
                            price: number;
                            position: number;
                            active: boolean;
                            soldOut: boolean;
                            warehouseAllQuantity?: number;
                            warehouseLimit?: number;
                            customFields: Record<string, never>;
                            event?: {
                                id: string;
                                startTime: Record<string, never> | string | number;
                                endTime: Record<string, never> | string | number;
                                /**
                                 * @description All day event will change startTime to 00:00:00 and endTime to 23:59:59.
                                 * @default false
                                 */
                                isAllDay: boolean;
                                /**
                                 * @description Blocking event will create a conflict with other events in same time slot.
                                 * @default true
                                 */
                                isBlocking: boolean;
                                title: string;
                                /** @description Enter details for this event. */
                                description?: string;
                                /** @description List the main points of the meeting. Other members can edit this agenda. */
                                agenda?: string;
                                url?: string;
                                locationTitle?: string;
                            };
                            advance?: {
                                relatedCustomers: string[];
                            };
                            orderStatistics?: {
                                totalQuantitySold: number;
                                statusNew: number;
                                statusProcessing: number;
                                statusStorno: number;
                                statusDone: number;
                            };
                            galleryItemsCount?: number;
                        }[];
                    };
                    'text/plain': {
                        count: number;
                        items: {
                            id: number;
                            name: string;
                            slug: string;
                            shortDescription?: string;
                            mainImageUrl?: string;
                            mainCategory?: {
                                slug: string;
                                code: string;
                                name: string;
                            };
                            price: number;
                            position: number;
                            active: boolean;
                            soldOut: boolean;
                            warehouseAllQuantity?: number;
                            warehouseLimit?: number;
                            customFields: Record<string, never>;
                            event?: {
                                id: string;
                                startTime: Record<string, never> | string | number;
                                endTime: Record<string, never> | string | number;
                                /**
                                 * @description All day event will change startTime to 00:00:00 and endTime to 23:59:59.
                                 * @default false
                                 */
                                isAllDay: boolean;
                                /**
                                 * @description Blocking event will create a conflict with other events in same time slot.
                                 * @default true
                                 */
                                isBlocking: boolean;
                                title: string;
                                /** @description Enter details for this event. */
                                description?: string;
                                /** @description List the main points of the meeting. Other members can edit this agenda. */
                                agenda?: string;
                                url?: string;
                                locationTitle?: string;
                            };
                            advance?: {
                                relatedCustomers: string[];
                            };
                            orderStatistics?: {
                                totalQuantitySold: number;
                                statusNew: number;
                                statusProcessing: number;
                                statusStorno: number;
                                statusDone: number;
                            };
                            galleryItemsCount?: number;
                        }[];
                    };
                };
            };
        };
    };
    'getApiV1Product-categoryDetail': {
        parameters: {
            query: {
                apiKey: string;
                slug: string;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    'getApiV1Product-categoryList': {
        parameters: {
            query: {
                apiKey: string;
                parentSlug?: string;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    'getApiV1Rate-limit-status': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    'getApiV1ReferralReferred-customers': {
        parameters: {
            query: {
                /** @description Main customer. */
                cuRefNo: string;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': {
                        items: {
                            /** @description Main customer. */
                            cuRefNo: string;
                            email: string;
                            firstName?: string;
                            lastName?: string;
                            insertedDate: Record<string, never> | string | number;
                            lastActivityDate: Record<string, never> | string | number;
                        }[];
                    };
                    'multipart/form-data': {
                        items: {
                            /** @description Main customer. */
                            cuRefNo: string;
                            email: string;
                            firstName?: string;
                            lastName?: string;
                            insertedDate: Record<string, never> | string | number;
                            lastActivityDate: Record<string, never> | string | number;
                        }[];
                    };
                    'text/plain': {
                        items: {
                            /** @description Main customer. */
                            cuRefNo: string;
                            email: string;
                            firstName?: string;
                            lastName?: string;
                            insertedDate: Record<string, never> | string | number;
                            lastActivityDate: Record<string, never> | string | number;
                        }[];
                    };
                };
            };
        };
    };
    getApiV1RoutingRoute: {
        parameters: {
            query: {
                apiKey: string;
                slug: string;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    getApiV1SecurityCaptcha: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': {
                        token: string;
                        imageBase64: string;
                    };
                    'multipart/form-data': {
                        token: string;
                        imageBase64: string;
                    };
                    'text/plain': {
                        token: string;
                        imageBase64: string;
                    };
                };
            };
        };
    };
    'getApiV1SecurityCaptcha-verify': {
        parameters: {
            query: {
                token: string;
                code: string;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': {
                        token: string;
                        code: string;
                        status: string;
                    };
                    'multipart/form-data': {
                        token: string;
                        code: string;
                        status: string;
                    };
                    'text/plain': {
                        token: string;
                        code: string;
                        status: string;
                    };
                };
            };
        };
    };
    'getApiV1Service-status': {
        parameters: {
            query: {
                domain: string;
                locale?: string;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': {
                        host: string;
                        domain: string;
                        status: 'ok' | 'error';
                        message: string;
                        color: string;
                        httpCode?: number;
                        lastCheckDate?: Record<string, never> | string | number;
                        statusPageUrl: string;
                    };
                    'multipart/form-data': {
                        host: string;
                        domain: string;
                        status: 'ok' | 'error';
                        message: string;
                        color: string;
                        httpCode?: number;
                        lastCheckDate?: Record<string, never> | string | number;
                        statusPageUrl: string;
                    };
                    'text/plain': {
                        host: string;
                        domain: string;
                        status: 'ok' | 'error';
                        message: string;
                        color: string;
                        httpCode?: number;
                        lastCheckDate?: Record<string, never> | string | number;
                        statusPageUrl: string;
                    };
                };
            };
        };
    };
    postApiV1ShopOrderCreate: {
        parameters: {
            query: {
                apiKey: string;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                'application/json': {
                    /** @description Link order to customer account. When account does not exist, system will create new automatically. */
                    customer: {
                        email: string;
                        name?: string;
                        firstName?: string;
                        lastName?: string;
                        phone?: string;
                        companyName?: string;
                        companyRegistrationNumber?: string;
                        taxIdentificationNumber?: string;
                        streetAddress?: string;
                        city?: string;
                        cityPart?: string;
                        stateRegion?: string;
                        postalCode?: string;
                        country?: string;
                        /** @default false */
                        newsletter?: boolean;
                        primaryLocale?: string;
                        groups?: string[];
                    };
                    /** @description List of alternative e-mails of customers for e-mail copy. */
                    copyCustomers?: string[];
                    cartId?: string;
                    items: {
                        /** @description Main order items label used in order detail and as invoice line. */
                        label: string;
                        /** @description Absolute value in order-defined currency.
                         *
                         *     The item price can be zero. Enter the price as a real value and do not use multiplication. We also accept decimal numbers and handle them safely with a precision of up to two decimal places.
                         *
                         *     The price value is determined dynamically based on hierarchy. First, the price you set is used. If no price is set, we attempt to retrieve it from the product variant or the core product. If no price is found there either, the price will be zero. */
                        price?: number;
                        /** @description Percentage VAT rate. */
                        vat?: number;
                        /** @description Integer value. Quantity, count, hours, ... */
                        count?: number;
                        /** @description Absolute value in order-defined currency. */
                        sale?: number;
                        unit?: string;
                        /** @description Link order item to product when product code has been defined. */
                        productCode?: string;
                        /** @description Link order item to product variant when product code AND variant code has been defined. */
                        variantCode?: string;
                        /** @description Link order item to calendar event when event code has been defined. */
                        eventCode?: string;
                        /** @description How many credits should be added to customer account when order will be paid? */
                        creditAmount?: number;
                        specialActions?: string | string[];
                    }[];
                    /** @description Organisation defined order group code. */
                    orderGroupId?: string;
                    /** @description Communication locale for notifications and payment gateway. */
                    locale?: string;
                    /** @description Main currency used for all items and payments in this order. */
                    currency?: string;
                    /** @description Absolute value in order-defined currency. */
                    sale?: number;
                    paymentMethod?: 'credits' | 'money';
                    /** @description Absolute value in order-defined currency. */
                    deliveryPrice?: number;
                    /** @description Absolute value in order-defined currency. */
                    paymentPrice?: number;
                    /** Format: date-time */
                    expirationDate?: string;
                    /** Format: date-time */
                    dueDate?: string;
                    /** @description Your internal notice for organisation members. Customer should never see this notice. */
                    internalNotice?: string;
                    /** @description Public notice defined by customer in cart. This notice can be displayed in e-mail and order detail page. */
                    publicNotice?: string;
                    tags?: Record<string, never>;
                    returnUrl?: string;
                    notificationUrl?: string;
                    formData?: {
                        code: string;
                        data: Record<string, never>;
                    };
                    /**
                     * @description Mark the order as paid immediately. The customer can go into negative credit. Payment will not be processed.
                     * @default false
                     */
                    forceIgnoreNegativeCreditBalance?: boolean;
                };
                'multipart/form-data': {
                    /** @description Link order to customer account. When account does not exist, system will create new automatically. */
                    customer: {
                        email: string;
                        name?: string;
                        firstName?: string;
                        lastName?: string;
                        phone?: string;
                        companyName?: string;
                        companyRegistrationNumber?: string;
                        taxIdentificationNumber?: string;
                        streetAddress?: string;
                        city?: string;
                        cityPart?: string;
                        stateRegion?: string;
                        postalCode?: string;
                        country?: string;
                        /** @default false */
                        newsletter?: boolean;
                        primaryLocale?: string;
                        groups?: string[];
                    };
                    /** @description List of alternative e-mails of customers for e-mail copy. */
                    copyCustomers?: string[];
                    cartId?: string;
                    items: {
                        /** @description Main order items label used in order detail and as invoice line. */
                        label: string;
                        /** @description Absolute value in order-defined currency.
                         *
                         *     The item price can be zero. Enter the price as a real value and do not use multiplication. We also accept decimal numbers and handle them safely with a precision of up to two decimal places.
                         *
                         *     The price value is determined dynamically based on hierarchy. First, the price you set is used. If no price is set, we attempt to retrieve it from the product variant or the core product. If no price is found there either, the price will be zero. */
                        price?: number;
                        /** @description Percentage VAT rate. */
                        vat?: number;
                        /** @description Integer value. Quantity, count, hours, ... */
                        count?: number;
                        /** @description Absolute value in order-defined currency. */
                        sale?: number;
                        unit?: string;
                        /** @description Link order item to product when product code has been defined. */
                        productCode?: string;
                        /** @description Link order item to product variant when product code AND variant code has been defined. */
                        variantCode?: string;
                        /** @description Link order item to calendar event when event code has been defined. */
                        eventCode?: string;
                        /** @description How many credits should be added to customer account when order will be paid? */
                        creditAmount?: number;
                        specialActions?: string | string[];
                    }[];
                    /** @description Organisation defined order group code. */
                    orderGroupId?: string;
                    /** @description Communication locale for notifications and payment gateway. */
                    locale?: string;
                    /** @description Main currency used for all items and payments in this order. */
                    currency?: string;
                    /** @description Absolute value in order-defined currency. */
                    sale?: number;
                    paymentMethod?: 'credits' | 'money';
                    /** @description Absolute value in order-defined currency. */
                    deliveryPrice?: number;
                    /** @description Absolute value in order-defined currency. */
                    paymentPrice?: number;
                    /** Format: date-time */
                    expirationDate?: string;
                    /** Format: date-time */
                    dueDate?: string;
                    /** @description Your internal notice for organisation members. Customer should never see this notice. */
                    internalNotice?: string;
                    /** @description Public notice defined by customer in cart. This notice can be displayed in e-mail and order detail page. */
                    publicNotice?: string;
                    tags?: Record<string, never>;
                    returnUrl?: string;
                    notificationUrl?: string;
                    formData?: {
                        code: string;
                        data: Record<string, never>;
                    };
                    /**
                     * @description Mark the order as paid immediately. The customer can go into negative credit. Payment will not be processed.
                     * @default false
                     */
                    forceIgnoreNegativeCreditBalance?: boolean;
                };
                'text/plain': {
                    /** @description Link order to customer account. When account does not exist, system will create new automatically. */
                    customer: {
                        email: string;
                        name?: string;
                        firstName?: string;
                        lastName?: string;
                        phone?: string;
                        companyName?: string;
                        companyRegistrationNumber?: string;
                        taxIdentificationNumber?: string;
                        streetAddress?: string;
                        city?: string;
                        cityPart?: string;
                        stateRegion?: string;
                        postalCode?: string;
                        country?: string;
                        /** @default false */
                        newsletter?: boolean;
                        primaryLocale?: string;
                        groups?: string[];
                    };
                    /** @description List of alternative e-mails of customers for e-mail copy. */
                    copyCustomers?: string[];
                    cartId?: string;
                    items: {
                        /** @description Main order items label used in order detail and as invoice line. */
                        label: string;
                        /** @description Absolute value in order-defined currency.
                         *
                         *     The item price can be zero. Enter the price as a real value and do not use multiplication. We also accept decimal numbers and handle them safely with a precision of up to two decimal places.
                         *
                         *     The price value is determined dynamically based on hierarchy. First, the price you set is used. If no price is set, we attempt to retrieve it from the product variant or the core product. If no price is found there either, the price will be zero. */
                        price?: number;
                        /** @description Percentage VAT rate. */
                        vat?: number;
                        /** @description Integer value. Quantity, count, hours, ... */
                        count?: number;
                        /** @description Absolute value in order-defined currency. */
                        sale?: number;
                        unit?: string;
                        /** @description Link order item to product when product code has been defined. */
                        productCode?: string;
                        /** @description Link order item to product variant when product code AND variant code has been defined. */
                        variantCode?: string;
                        /** @description Link order item to calendar event when event code has been defined. */
                        eventCode?: string;
                        /** @description How many credits should be added to customer account when order will be paid? */
                        creditAmount?: number;
                        specialActions?: string | string[];
                    }[];
                    /** @description Organisation defined order group code. */
                    orderGroupId?: string;
                    /** @description Communication locale for notifications and payment gateway. */
                    locale?: string;
                    /** @description Main currency used for all items and payments in this order. */
                    currency?: string;
                    /** @description Absolute value in order-defined currency. */
                    sale?: number;
                    paymentMethod?: 'credits' | 'money';
                    /** @description Absolute value in order-defined currency. */
                    deliveryPrice?: number;
                    /** @description Absolute value in order-defined currency. */
                    paymentPrice?: number;
                    /** Format: date-time */
                    expirationDate?: string;
                    /** Format: date-time */
                    dueDate?: string;
                    /** @description Your internal notice for organisation members. Customer should never see this notice. */
                    internalNotice?: string;
                    /** @description Public notice defined by customer in cart. This notice can be displayed in e-mail and order detail page. */
                    publicNotice?: string;
                    tags?: Record<string, never>;
                    returnUrl?: string;
                    notificationUrl?: string;
                    formData?: {
                        code: string;
                        data: Record<string, never>;
                    };
                    /**
                     * @description Mark the order as paid immediately. The customer can go into negative credit. Payment will not be processed.
                     * @default false
                     */
                    forceIgnoreNegativeCreditBalance?: boolean;
                };
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': {
                        orderNumber: string;
                        hash: string;
                        links: {
                            orderPageLink: string;
                            payLink: string;
                        };
                    };
                    'multipart/form-data': {
                        orderNumber: string;
                        hash: string;
                        links: {
                            orderPageLink: string;
                            payLink: string;
                        };
                    };
                    'text/plain': {
                        orderNumber: string;
                        hash: string;
                        links: {
                            orderPageLink: string;
                            payLink: string;
                        };
                    };
                };
            };
        };
    };
    getApiV1ShopOrderDetail: {
        parameters: {
            query: {
                hash: string;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json':
                        | {
                              /**
                               * @description Indicator of whether the order exists.
                               * @constant
                               */
                              exist: true;
                              /** @description Order number for system identification. */
                              id: string;
                              /** @description Unique hash of the order. */
                              hash: string;
                              locale: string;
                              /** @description Date and time of order payment. */
                              payDate?: Record<string, never> | string | number;
                              status: {
                                  /** @description Public status label defined by the organization and order group. */
                                  label: string;
                                  color: string;
                                  onlinePaymentStatus?: string;
                                  onlinePaymentStatusLabel?: string;
                                  /** @description Indicator of whether online payment checking is in progress. */
                                  onlinePaymentChecking: boolean;
                              };
                              /** @description Public note for the order. */
                              publicNotice?: string;
                              /** @description Date and time the order was created. */
                              insertedDate: Record<string, never> | string | number;
                              /** @description Date and time the order was last updated. */
                              updatedDate: Record<string, never> | string | number;
                              /** @description Date and time of order expiration. If this time is reached and the order is not paid, it will be automatically canceled. */
                              expirationDate?: Record<string, never> | string | number;
                              price: {
                                  /** @description Cena s DPH. */
                                  priceWithVat: number;
                                  /** @description Měna ceny. */
                                  currency: string;
                                  /** @description Cena bez DPH. */
                                  priceWithoutVat: number;
                                  /** @description Výše DPH v procentech. */
                                  vat: number;
                                  /** @description Místní označení měny. */
                                  currencyLocale: string;
                              };
                              sale: {
                                  /** @description Cena s DPH. */
                                  priceWithVat: number;
                                  /** @description Měna ceny. */
                                  currency: string;
                                  /** @description Cena bez DPH. */
                                  priceWithoutVat: number;
                                  /** @description Výše DPH v procentech. */
                                  vat: number;
                                  /** @description Místní označení měny. */
                                  currencyLocale: string;
                              };
                              customer?: {
                                  /** @description Customer email. */
                                  email: string;
                                  /** @description Customer phone number. */
                                  phone?: string;
                                  /** @description Customer first name. */
                                  firstName?: string;
                                  /** @description Customer last name. */
                                  lastName?: string;
                                  /** @description Name of the customer's company. */
                                  companyName?: string;
                                  /** @description Indicator of whether the customer is premium. */
                                  premium: boolean;
                              };
                              items: {
                                  /** @description Order item ID. */
                                  id: string;
                                  /** @description Indicator of whether the item is canceled. */
                                  isStorno: boolean;
                                  /** @description Order item description as HTML. */
                                  label: string;
                                  /** @description Number of items. */
                                  count: number;
                                  price: {
                                      /** @description Cena s DPH. */
                                      priceWithVat: number;
                                      /** @description Měna ceny. */
                                      currency: string;
                                      /** @description Cena bez DPH. */
                                      priceWithoutVat: number;
                                      /** @description Výše DPH v procentech. */
                                      vat: number;
                                      /** @description Místní označení měny. */
                                      currencyLocale: string;
                                  };
                                  sale: {
                                      /** @description Cena s DPH. */
                                      priceWithVat: number;
                                      /** @description Měna ceny. */
                                      currency: string;
                                      /** @description Cena bez DPH. */
                                      priceWithoutVat: number;
                                      /** @description Výše DPH v procentech. */
                                      vat: number;
                                      /** @description Místní označení měny. */
                                      currencyLocale: string;
                                  };
                                  /** @description Item units. */
                                  unit: number;
                                  vat?: number;
                                  /** @description Credit value of the item. */
                                  creditAmount: number;
                                  productCode?: string;
                                  productName?: string;
                                  productMainImageUrl?: string;
                                  variantCode?: string;
                                  variantName?: string;
                                  eventCalendarCode?: string;
                                  eventCode?: string;
                                  eventTitle?: string;
                              }[];
                              tags: Record<string, never>;
                              links: {
                                  /** @description Link for online payment of the order. */
                                  onlinePaymentLink?: string;
                                  /** @description URL to which the customer is redirected after successful payment. */
                                  returnUrl?: string;
                              };
                          }
                        | {
                              /** @constant */
                              exist: false;
                          };
                    'multipart/form-data':
                        | {
                              /**
                               * @description Indicator of whether the order exists.
                               * @constant
                               */
                              exist: true;
                              /** @description Order number for system identification. */
                              id: string;
                              /** @description Unique hash of the order. */
                              hash: string;
                              locale: string;
                              /** @description Date and time of order payment. */
                              payDate?: Record<string, never> | string | number;
                              status: {
                                  /** @description Public status label defined by the organization and order group. */
                                  label: string;
                                  color: string;
                                  onlinePaymentStatus?: string;
                                  onlinePaymentStatusLabel?: string;
                                  /** @description Indicator of whether online payment checking is in progress. */
                                  onlinePaymentChecking: boolean;
                              };
                              /** @description Public note for the order. */
                              publicNotice?: string;
                              /** @description Date and time the order was created. */
                              insertedDate: Record<string, never> | string | number;
                              /** @description Date and time the order was last updated. */
                              updatedDate: Record<string, never> | string | number;
                              /** @description Date and time of order expiration. If this time is reached and the order is not paid, it will be automatically canceled. */
                              expirationDate?: Record<string, never> | string | number;
                              price: {
                                  /** @description Cena s DPH. */
                                  priceWithVat: number;
                                  /** @description Měna ceny. */
                                  currency: string;
                                  /** @description Cena bez DPH. */
                                  priceWithoutVat: number;
                                  /** @description Výše DPH v procentech. */
                                  vat: number;
                                  /** @description Místní označení měny. */
                                  currencyLocale: string;
                              };
                              sale: {
                                  /** @description Cena s DPH. */
                                  priceWithVat: number;
                                  /** @description Měna ceny. */
                                  currency: string;
                                  /** @description Cena bez DPH. */
                                  priceWithoutVat: number;
                                  /** @description Výše DPH v procentech. */
                                  vat: number;
                                  /** @description Místní označení měny. */
                                  currencyLocale: string;
                              };
                              customer?: {
                                  /** @description Customer email. */
                                  email: string;
                                  /** @description Customer phone number. */
                                  phone?: string;
                                  /** @description Customer first name. */
                                  firstName?: string;
                                  /** @description Customer last name. */
                                  lastName?: string;
                                  /** @description Name of the customer's company. */
                                  companyName?: string;
                                  /** @description Indicator of whether the customer is premium. */
                                  premium: boolean;
                              };
                              items: {
                                  /** @description Order item ID. */
                                  id: string;
                                  /** @description Indicator of whether the item is canceled. */
                                  isStorno: boolean;
                                  /** @description Order item description as HTML. */
                                  label: string;
                                  /** @description Number of items. */
                                  count: number;
                                  price: {
                                      /** @description Cena s DPH. */
                                      priceWithVat: number;
                                      /** @description Měna ceny. */
                                      currency: string;
                                      /** @description Cena bez DPH. */
                                      priceWithoutVat: number;
                                      /** @description Výše DPH v procentech. */
                                      vat: number;
                                      /** @description Místní označení měny. */
                                      currencyLocale: string;
                                  };
                                  sale: {
                                      /** @description Cena s DPH. */
                                      priceWithVat: number;
                                      /** @description Měna ceny. */
                                      currency: string;
                                      /** @description Cena bez DPH. */
                                      priceWithoutVat: number;
                                      /** @description Výše DPH v procentech. */
                                      vat: number;
                                      /** @description Místní označení měny. */
                                      currencyLocale: string;
                                  };
                                  /** @description Item units. */
                                  unit: number;
                                  vat?: number;
                                  /** @description Credit value of the item. */
                                  creditAmount: number;
                                  productCode?: string;
                                  productName?: string;
                                  productMainImageUrl?: string;
                                  variantCode?: string;
                                  variantName?: string;
                                  eventCalendarCode?: string;
                                  eventCode?: string;
                                  eventTitle?: string;
                              }[];
                              tags: Record<string, never>;
                              links: {
                                  /** @description Link for online payment of the order. */
                                  onlinePaymentLink?: string;
                                  /** @description URL to which the customer is redirected after successful payment. */
                                  returnUrl?: string;
                              };
                          }
                        | {
                              /** @constant */
                              exist: false;
                          };
                    'text/plain':
                        | {
                              /**
                               * @description Indicator of whether the order exists.
                               * @constant
                               */
                              exist: true;
                              /** @description Order number for system identification. */
                              id: string;
                              /** @description Unique hash of the order. */
                              hash: string;
                              locale: string;
                              /** @description Date and time of order payment. */
                              payDate?: Record<string, never> | string | number;
                              status: {
                                  /** @description Public status label defined by the organization and order group. */
                                  label: string;
                                  color: string;
                                  onlinePaymentStatus?: string;
                                  onlinePaymentStatusLabel?: string;
                                  /** @description Indicator of whether online payment checking is in progress. */
                                  onlinePaymentChecking: boolean;
                              };
                              /** @description Public note for the order. */
                              publicNotice?: string;
                              /** @description Date and time the order was created. */
                              insertedDate: Record<string, never> | string | number;
                              /** @description Date and time the order was last updated. */
                              updatedDate: Record<string, never> | string | number;
                              /** @description Date and time of order expiration. If this time is reached and the order is not paid, it will be automatically canceled. */
                              expirationDate?: Record<string, never> | string | number;
                              price: {
                                  /** @description Cena s DPH. */
                                  priceWithVat: number;
                                  /** @description Měna ceny. */
                                  currency: string;
                                  /** @description Cena bez DPH. */
                                  priceWithoutVat: number;
                                  /** @description Výše DPH v procentech. */
                                  vat: number;
                                  /** @description Místní označení měny. */
                                  currencyLocale: string;
                              };
                              sale: {
                                  /** @description Cena s DPH. */
                                  priceWithVat: number;
                                  /** @description Měna ceny. */
                                  currency: string;
                                  /** @description Cena bez DPH. */
                                  priceWithoutVat: number;
                                  /** @description Výše DPH v procentech. */
                                  vat: number;
                                  /** @description Místní označení měny. */
                                  currencyLocale: string;
                              };
                              customer?: {
                                  /** @description Customer email. */
                                  email: string;
                                  /** @description Customer phone number. */
                                  phone?: string;
                                  /** @description Customer first name. */
                                  firstName?: string;
                                  /** @description Customer last name. */
                                  lastName?: string;
                                  /** @description Name of the customer's company. */
                                  companyName?: string;
                                  /** @description Indicator of whether the customer is premium. */
                                  premium: boolean;
                              };
                              items: {
                                  /** @description Order item ID. */
                                  id: string;
                                  /** @description Indicator of whether the item is canceled. */
                                  isStorno: boolean;
                                  /** @description Order item description as HTML. */
                                  label: string;
                                  /** @description Number of items. */
                                  count: number;
                                  price: {
                                      /** @description Cena s DPH. */
                                      priceWithVat: number;
                                      /** @description Měna ceny. */
                                      currency: string;
                                      /** @description Cena bez DPH. */
                                      priceWithoutVat: number;
                                      /** @description Výše DPH v procentech. */
                                      vat: number;
                                      /** @description Místní označení měny. */
                                      currencyLocale: string;
                                  };
                                  sale: {
                                      /** @description Cena s DPH. */
                                      priceWithVat: number;
                                      /** @description Měna ceny. */
                                      currency: string;
                                      /** @description Cena bez DPH. */
                                      priceWithoutVat: number;
                                      /** @description Výše DPH v procentech. */
                                      vat: number;
                                      /** @description Místní označení měny. */
                                      currencyLocale: string;
                                  };
                                  /** @description Item units. */
                                  unit: number;
                                  vat?: number;
                                  /** @description Credit value of the item. */
                                  creditAmount: number;
                                  productCode?: string;
                                  productName?: string;
                                  productMainImageUrl?: string;
                                  variantCode?: string;
                                  variantName?: string;
                                  eventCalendarCode?: string;
                                  eventCode?: string;
                                  eventTitle?: string;
                              }[];
                              tags: Record<string, never>;
                              links: {
                                  /** @description Link for online payment of the order. */
                                  onlinePaymentLink?: string;
                                  /** @description URL to which the customer is redirected after successful payment. */
                                  returnUrl?: string;
                              };
                          }
                        | {
                              /** @constant */
                              exist: false;
                          };
                };
            };
        };
    };
    'postApiV1ShopOrderCreate-payment': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                'application/json': {
                    hash: string;
                };
                'multipart/form-data': {
                    hash: string;
                };
                'text/plain': {
                    hash: string;
                };
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': {
                        redirectUrl: string;
                    };
                    'multipart/form-data': {
                        redirectUrl: string;
                    };
                    'text/plain': {
                        redirectUrl: string;
                    };
                };
            };
        };
    };
    'postApiV1ShopOrderCheck-payment-status': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                'application/json': {
                    hash: string;
                };
                'multipart/form-data': {
                    hash: string;
                };
                'text/plain': {
                    hash: string;
                };
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': {
                        redirectUrl?: string;
                    };
                    'multipart/form-data': {
                        redirectUrl?: string;
                    };
                    'text/plain': {
                        redirectUrl?: string;
                    };
                };
            };
        };
    };
    postApiV1ShopOrderStorno: {
        parameters: {
            query: {
                apiKey: string;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                'application/json': {
                    orderId: string;
                    orderItemId?: string;
                };
                'multipart/form-data': {
                    orderId: string;
                    orderItemId?: string;
                };
                'text/plain': {
                    orderId: string;
                    orderItemId?: string;
                };
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json':
                        | {
                              /** @constant */
                              success: true;
                          }
                        | {
                              /** @constant */
                              success: false;
                              message: string;
                          };
                    'multipart/form-data':
                        | {
                              /** @constant */
                              success: true;
                          }
                        | {
                              /** @constant */
                              success: false;
                              message: string;
                          };
                    'text/plain':
                        | {
                              /** @constant */
                              success: true;
                          }
                        | {
                              /** @constant */
                              success: false;
                              message: string;
                          };
                };
            };
        };
    };
    getApiV1ShopPaymentCreate: {
        parameters: {
            query: {
                apiKey: string;
                hash: string;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    'getApiV1ShopPaymentProcess-notification': {
        parameters: {
            query: {
                apiKey: string;
                id: string;
                orderId: string;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    'postApiV1SupportContact-form': {
        parameters: {
            query: {
                apiKey: string;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                'application/json': {
                    message: string;
                    subject?: string;
                    notice?: string;
                    sendToEmail?: string;
                    categorySlug?: string;
                    customerEmail?: string;
                    customerPhone?: string;
                };
                'multipart/form-data': {
                    message: string;
                    subject?: string;
                    notice?: string;
                    sendToEmail?: string;
                    categorySlug?: string;
                    customerEmail?: string;
                    customerPhone?: string;
                };
                'text/plain': {
                    message: string;
                    subject?: string;
                    notice?: string;
                    sendToEmail?: string;
                    categorySlug?: string;
                    customerEmail?: string;
                    customerPhone?: string;
                };
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': {
                        /** @constant */
                        success: true;
                    };
                    'multipart/form-data': {
                        /** @constant */
                        success: true;
                    };
                    'text/plain': {
                        /** @constant */
                        success: true;
                    };
                };
            };
        };
    };
    'getApiV1TrackingEmail-pixel': {
        parameters: {
            query: {
                /** @description External generated message ID, for example `v2.mail::p0xvq-1736628881328-n92ql8.gymroom`.
                 *
                 *     Supported prefixes:
                 *
                 *     - `v1` bulk newsletter e-mail message
                 *     - `v2` individual e-mail message */
                id: string;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': Record<string, never>;
                    'multipart/form-data': Record<string, never>;
                    'text/plain': Record<string, never>;
                };
            };
        };
    };
    getApiV1WebpageFavicon: {
        parameters: {
            query: {
                apiKey: string;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    getApiV1WebpageScreenshot: {
        parameters: {
            query: {
                apiKey: string;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    getBffAccount: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': {
                        isLoggedIn: boolean;
                    };
                    'multipart/form-data': {
                        isLoggedIn: boolean;
                    };
                    'text/plain': {
                        isLoggedIn: boolean;
                    };
                };
            };
        };
    };
    getBffAccountDetail: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    'getBffAccountDetail-contact': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    'getBffAccountAudit-login-attempts': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': {
                        currentIp: string;
                        currentLocation: string;
                        itemCount: number;
                        items: {
                            id: number;
                            committed: boolean;
                            ip: string;
                            insertedDate: string;
                            relativeDate: string;
                            location: string;
                        }[];
                    };
                    'multipart/form-data': {
                        currentIp: string;
                        currentLocation: string;
                        itemCount: number;
                        items: {
                            id: number;
                            committed: boolean;
                            ip: string;
                            insertedDate: string;
                            relativeDate: string;
                            location: string;
                        }[];
                    };
                    'text/plain': {
                        currentIp: string;
                        currentLocation: string;
                        itemCount: number;
                        items: {
                            id: number;
                            committed: boolean;
                            ip: string;
                            insertedDate: string;
                            relativeDate: string;
                            location: string;
                        }[];
                    };
                };
            };
        };
    };
    'getBffAccountFind-organisation': {
        parameters: {
            query: {
                workEmail: string;
                organisationDomain: string;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    'postBffAccountLogin-otp-auth': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                'application/json': {
                    otpCode: string;
                };
                'multipart/form-data': {
                    otpCode: string;
                };
                'text/plain': {
                    otpCode: string;
                };
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    'postBffAccountReset-password': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                'application/json': {
                    token: string;
                    passwordInput: string;
                    passwordAgain: string;
                };
                'multipart/form-data': {
                    token: string;
                    passwordInput: string;
                    passwordAgain: string;
                };
                'text/plain': {
                    token: string;
                    passwordInput: string;
                    passwordAgain: string;
                };
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    'postBffAccountRestore-personal-account': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                'application/json': {
                    emailInput: string;
                    captchaToken: string;
                    captchaCode: string;
                };
                'multipart/form-data': {
                    emailInput: string;
                    captchaToken: string;
                    captchaCode: string;
                };
                'text/plain': {
                    emailInput: string;
                    captchaToken: string;
                    captchaCode: string;
                };
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    'getBffAccountSet-activity-status': {
        parameters: {
            query: {
                status: string;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    'postBffAccountSet-name': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                'application/json': {
                    firstName: string;
                    lastName: string;
                    middleName?: string;
                    nick?: string;
                };
                'multipart/form-data': {
                    firstName: string;
                    lastName: string;
                    middleName?: string;
                    nick?: string;
                };
                'text/plain': {
                    firstName: string;
                    lastName: string;
                    middleName?: string;
                    nick?: string;
                };
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    'postBffAccountSetup-otp-generate-secret': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    'postBffAccountSetup-otp-save': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                'application/json': {
                    secret: string;
                    otpCode: string;
                };
                'multipart/form-data': {
                    secret: string;
                    otpCode: string;
                };
                'text/plain': {
                    secret: string;
                    otpCode: string;
                };
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    'getBffAccountSwitch-organisation': {
        parameters: {
            query: {
                organisation: string;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    'getBffAccountSync-status': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    'getBffAccountVerify-email': {
        parameters: {
            query: {
                token: string;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    'postBffAccountCreate-login-attempt': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                'application/json': {
                    username: string;
                };
                'multipart/form-data': {
                    username: string;
                };
                'text/plain': {
                    username: string;
                };
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json':
                        | {
                              /** @constant */
                              success: true;
                              identifier: string;
                          }
                        | {
                              /** @constant */
                              success: false;
                              error: string;
                          };
                    'multipart/form-data':
                        | {
                              /** @constant */
                              success: true;
                              identifier: string;
                          }
                        | {
                              /** @constant */
                              success: false;
                              error: string;
                          };
                    'text/plain':
                        | {
                              /** @constant */
                              success: true;
                              identifier: string;
                          }
                        | {
                              /** @constant */
                              success: false;
                              error: string;
                          };
                };
            };
        };
    };
    postBffAccountLogin: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                'application/json': {
                    username: string;
                    password: string;
                    attempt: string;
                };
                'multipart/form-data': {
                    username: string;
                    password: string;
                    attempt: string;
                };
                'text/plain': {
                    username: string;
                    password: string;
                    attempt: string;
                };
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json':
                        | {
                              /** @constant */
                              success: true;
                              identity: string;
                              needOtp: boolean;
                          }
                        | {
                              /** @constant */
                              success: false;
                              error: string;
                          };
                    'multipart/form-data':
                        | {
                              /** @constant */
                              success: true;
                              identity: string;
                              needOtp: boolean;
                          }
                        | {
                              /** @constant */
                              success: false;
                              error: string;
                          };
                    'text/plain':
                        | {
                              /** @constant */
                              success: true;
                              identity: string;
                              needOtp: boolean;
                          }
                        | {
                              /** @constant */
                              success: false;
                              error: string;
                          };
                };
            };
        };
    };
    postBffAccountLogout: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                'application/json': {
                    identityId?: string;
                    logoutAllOther?: boolean;
                };
                'multipart/form-data': {
                    identityId?: string;
                    logoutAllOther?: boolean;
                };
                'text/plain': {
                    identityId?: string;
                    logoutAllOther?: boolean;
                };
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': {
                        /** @constant */
                        success: true;
                    };
                    'multipart/form-data': {
                        /** @constant */
                        success: true;
                    };
                    'text/plain': {
                        /** @constant */
                        success: true;
                    };
                };
            };
        };
    };
    'postBffAccountCreate-account': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                'application/json': {
                    locale: string;
                    emailInput: string;
                    firstName: string;
                    lastName: string;
                    passwordInput: string;
                    passwordAgain: string;
                    captchaToken: string;
                    captchaCode: string;
                    checkboxTerms?: boolean;
                    /** @default true */
                    checkboxMarketing?: boolean;
                };
                'multipart/form-data': {
                    locale: string;
                    emailInput: string;
                    firstName: string;
                    lastName: string;
                    passwordInput: string;
                    passwordAgain: string;
                    captchaToken: string;
                    captchaCode: string;
                    checkboxTerms?: boolean;
                    /** @default true */
                    checkboxMarketing?: boolean;
                };
                'text/plain': {
                    locale: string;
                    emailInput: string;
                    firstName: string;
                    lastName: string;
                    passwordInput: string;
                    passwordAgain: string;
                    captchaToken: string;
                    captchaCode: string;
                    checkboxTerms?: boolean;
                    /** @default true */
                    checkboxMarketing?: boolean;
                };
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    postBffAiQuestion: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                'application/json': {
                    question: string;
                };
                'multipart/form-data': {
                    question: string;
                };
                'text/plain': {
                    question: string;
                };
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    getBffAiTest: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    'getBffApi-keyList': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    'getBffApi-keyDetail': {
        parameters: {
            query: {
                id: string;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    'postBffApi-keyGenerate-key': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                'application/json': {
                    environment: string;
                    relatedToMember?: boolean;
                    description?: string;
                    expirationDate?: string;
                };
                'multipart/form-data': {
                    environment: string;
                    relatedToMember?: boolean;
                    description?: string;
                    expirationDate?: string;
                };
                'text/plain': {
                    environment: string;
                    relatedToMember?: boolean;
                    description?: string;
                    expirationDate?: string;
                };
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    postBffBlobUpload: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    'postBffBlobUpload-user-avatar': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': {
                        /** @default true */
                        success: boolean;
                    };
                    'multipart/form-data': {
                        /** @default true */
                        success: boolean;
                    };
                    'text/plain': {
                        /** @default true */
                        success: boolean;
                    };
                };
            };
        };
    };
    'getBffCalendarCalendar-list': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    'getBffCalendarCalendar-detail': {
        parameters: {
            query: {
                code: string;
                view: string;
                selectorFrom?: string;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    'getBffCalendarCalendar-settings': {
        parameters: {
            query: {
                code: string;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    'getBffCalendarCalendar-analytics': {
        parameters: {
            query: {
                code: string;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    'postBffCalendarCalendar-add': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    'getBffCalendarDetail-reservations': {
        parameters: {
            query?: {
                customerId?: string;
                calendarId?: string;
                page?: number;
                limit?: number;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    'getBffCalendarEvent-detail': {
        parameters: {
            query: {
                eventId: string;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    'getBffCalendarEvent-find-conflict': {
        parameters: {
            query: {
                calendarId: string;
                startTime: string;
                endTime: string;
                isAllDay?: string;
                isBlocking?: string;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    'postBffCalendarEvent-add': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    'getBffCalendarEvent-type-list': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': {
                        items: {
                            label: string;
                            code: string;
                            color: string;
                        }[];
                    };
                    'multipart/form-data': {
                        items: {
                            label: string;
                            code: string;
                            color: string;
                        }[];
                    };
                    'text/plain': {
                        items: {
                            label: string;
                            code: string;
                            color: string;
                        }[];
                    };
                };
            };
        };
    };
    getBffCmsMenu: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    getBffComgateStatus: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json':
                        | {
                              configured: boolean;
                              /** @constant */
                              connectionWorks: true;
                              merchantId: string;
                              secret: string;
                          }
                        | {
                              configured: boolean;
                              /** @constant */
                              connectionWorks: false;
                          };
                    'multipart/form-data':
                        | {
                              configured: boolean;
                              /** @constant */
                              connectionWorks: true;
                              merchantId: string;
                              secret: string;
                          }
                        | {
                              configured: boolean;
                              /** @constant */
                              connectionWorks: false;
                          };
                    'text/plain':
                        | {
                              configured: boolean;
                              /** @constant */
                              connectionWorks: true;
                              merchantId: string;
                              secret: string;
                          }
                        | {
                              configured: boolean;
                              /** @constant */
                              connectionWorks: false;
                          };
                };
            };
        };
    };
    'postBffComgateTest-connection': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                'application/json': {
                    merchantId: string;
                    secret: string;
                };
                'multipart/form-data': {
                    merchantId: string;
                    secret: string;
                };
                'text/plain': {
                    merchantId: string;
                    secret: string;
                };
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': {
                        success: boolean;
                        errorMessage?: string;
                    };
                    'multipart/form-data': {
                        success: boolean;
                        errorMessage?: string;
                    };
                    'text/plain': {
                        success: boolean;
                        errorMessage?: string;
                    };
                };
            };
        };
    };
    getBffCustomerList: {
        parameters: {
            query?: {
                limit?: number;
                page?: number;
                filterFulltextQuery?: string;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    getBffCustomerDetail: {
        parameters: {
            query: {
                customerId: string;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    'postBffCustomerDetail-edit': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': {
                        /** @default true */
                        success: boolean;
                    };
                    'multipart/form-data': {
                        /** @default true */
                        success: boolean;
                    };
                    'text/plain': {
                        /** @default true */
                        success: boolean;
                    };
                };
            };
        };
    };
    'getBffCustomerDetail-credit': {
        parameters: {
            query: {
                customerId: string;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    'getBffCustomerDetail-sessions': {
        parameters: {
            query: {
                customerId: string;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    'getBffCustomerDetail-password-log': {
        parameters: {
            query: {
                customerId: string;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    'getBffCustomerDetail-security-info': {
        parameters: {
            query: {
                customerId: string;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    'getBffCustomerDetail-address': {
        parameters: {
            query: {
                customerId: string;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    'getBffCustomerGroup-list': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    'postBffCustomerSet-password': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                'application/json': {
                    customerId: string;
                    newPassword: string;
                };
                'multipart/form-data': {
                    customerId: string;
                    newPassword: string;
                };
                'text/plain': {
                    customerId: string;
                    newPassword: string;
                };
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    'postBffCustomerMerge-customers': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                'application/json': {
                    finalCustomerId: string;
                    legacyCustomerId: string;
                };
                'multipart/form-data': {
                    finalCustomerId: string;
                    legacyCustomerId: string;
                };
                'text/plain': {
                    finalCustomerId: string;
                    legacyCustomerId: string;
                };
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': {
                        /** @default true */
                        success: boolean;
                    };
                    'multipart/form-data': {
                        /** @default true */
                        success: boolean;
                    };
                    'text/plain': {
                        /** @default true */
                        success: boolean;
                    };
                };
            };
        };
    };
    'postBffCustomerInvalidate-sessions': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                'application/json': {
                    id: string;
                };
                'multipart/form-data': {
                    id: string;
                };
                'text/plain': {
                    id: string;
                };
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': {
                        /** @default true */
                        success: boolean;
                    };
                    'multipart/form-data': {
                        /** @default true */
                        success: boolean;
                    };
                    'text/plain': {
                        /** @default true */
                        success: boolean;
                    };
                };
            };
        };
    };
    'postBffCustomerProcess-register-request': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                'application/json': {
                    token: string;
                };
                'multipart/form-data': {
                    token: string;
                };
                'text/plain': {
                    token: string;
                };
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    'postBffCustomerReset-password': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                'application/json': {
                    email: string;
                };
                'multipart/form-data': {
                    email: string;
                };
                'text/plain': {
                    email: string;
                };
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': {
                        /** @constant */
                        success: true;
                    };
                    'multipart/form-data': {
                        /** @constant */
                        success: true;
                    };
                    'text/plain': {
                        /** @constant */
                        success: true;
                    };
                };
            };
        };
    };
    'postBffCustomerProcess-set-password': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                'application/json': {
                    token: string;
                    password: string;
                };
                'multipart/form-data': {
                    token: string;
                    password: string;
                };
                'text/plain': {
                    token: string;
                    password: string;
                };
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json':
                        | {
                              /** @constant */
                              success: true;
                          }
                        | {
                              /** @constant */
                              success: false;
                              errorCode: string;
                              message: string;
                          };
                    'multipart/form-data':
                        | {
                              /** @constant */
                              success: true;
                          }
                        | {
                              /** @constant */
                              success: false;
                              errorCode: string;
                              message: string;
                          };
                    'text/plain':
                        | {
                              /** @constant */
                              success: true;
                          }
                        | {
                              /** @constant */
                              success: false;
                              errorCode: string;
                              message: string;
                          };
                };
            };
        };
    };
    'postBffCustomerAdd-credit-record': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                'application/json': {
                    customerId: string;
                    amount: number;
                    description?: string;
                    useExpiration: boolean;
                    expirationDate?: string;
                };
                'multipart/form-data': {
                    customerId: string;
                    amount: number;
                    description?: string;
                    useExpiration: boolean;
                    expirationDate?: string;
                };
                'text/plain': {
                    customerId: string;
                    amount: number;
                    description?: string;
                    useExpiration: boolean;
                    expirationDate?: string;
                };
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': {
                        /** @default true */
                        success: boolean;
                    };
                    'multipart/form-data': {
                        /** @default true */
                        success: boolean;
                    };
                    'text/plain': {
                        /** @default true */
                        success: boolean;
                    };
                };
            };
        };
    };
    'postBffCustomerGenerate-api-key': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                'application/json': {
                    id: string;
                    name: string;
                    workspace: string;
                };
                'multipart/form-data': {
                    id: string;
                    name: string;
                    workspace: string;
                };
                'text/plain': {
                    id: string;
                    name: string;
                    workspace: string;
                };
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': {
                        /** @default true */
                        success: boolean;
                        apiKey: string;
                    };
                    'multipart/form-data': {
                        /** @default true */
                        success: boolean;
                        apiKey: string;
                    };
                    'text/plain': {
                        /** @default true */
                        success: boolean;
                        apiKey: string;
                    };
                };
            };
        };
    };
    'getBffCustomerWorkspace-list': {
        parameters: {
            query: {
                customerId: string;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    'postBffCustomerAdd-workspace': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                'application/json': {
                    id: string;
                    name: string;
                    color: string;
                };
                'multipart/form-data': {
                    id: string;
                    name: string;
                    color: string;
                };
                'text/plain': {
                    id: string;
                    name: string;
                    color: string;
                };
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': {
                        /** @default true */
                        success: boolean;
                    };
                    'multipart/form-data': {
                        /** @default true */
                        success: boolean;
                    };
                    'text/plain': {
                        /** @default true */
                        success: boolean;
                    };
                };
            };
        };
    };
    'postBffCustomerBlock-customer': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                'application/json': {
                    id: string;
                    reason?: string;
                };
                'multipart/form-data': {
                    id: string;
                    reason?: string;
                };
                'text/plain': {
                    id: string;
                    reason?: string;
                };
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': {
                        /** @default true */
                        success: boolean;
                    };
                    'multipart/form-data': {
                        /** @default true */
                        success: boolean;
                    };
                    'text/plain': {
                        /** @default true */
                        success: boolean;
                    };
                };
            };
        };
    };
    'postBffCustomerBulk-import': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                'application/json': {
                    contactList: {
                        email: string;
                        name: string;
                    }[];
                    internalNote: string;
                };
                'multipart/form-data': {
                    contactList: {
                        email: string;
                        name: string;
                    }[];
                    internalNote: string;
                };
                'text/plain': {
                    contactList: {
                        email: string;
                        name: string;
                    }[];
                    internalNote: string;
                };
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': {
                        /** @default true */
                        success: boolean;
                    };
                    'multipart/form-data': {
                        /** @default true */
                        success: boolean;
                    };
                    'text/plain': {
                        /** @default true */
                        success: boolean;
                    };
                };
            };
        };
    };
    'getBffDevTranslate-dictionaries': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    getBffDomainList: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    'getBffDomainShow-verify-token': {
        parameters: {
            query: {
                domain: string;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': {
                        verifyToken: string;
                        dnsHeader: string;
                    };
                    'multipart/form-data': {
                        verifyToken: string;
                        dnsHeader: string;
                    };
                    'text/plain': {
                        verifyToken: string;
                        dnsHeader: string;
                    };
                };
            };
        };
    };
    'getBffDomainCheck-verify-token': {
        parameters: {
            query: {
                domain: string;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': {
                        success: boolean;
                    };
                    'multipart/form-data': {
                        success: boolean;
                    };
                    'text/plain': {
                        success: boolean;
                    };
                };
            };
        };
    };
    postBffDomainAdd: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                'application/json': {
                    domain: string;
                };
                'multipart/form-data': {
                    domain: string;
                };
                'text/plain': {
                    domain: string;
                };
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': {
                        success: boolean;
                    };
                    'multipart/form-data': {
                        success: boolean;
                    };
                    'text/plain': {
                        success: boolean;
                    };
                };
            };
        };
    };
    getBffDriveList: {
        parameters: {
            query?: {
                path?: string;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    'getBffEcommerceAddressResolve-address-by-ico': {
        parameters: {
            query: {
                ico: string;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': {
                        address: unknown;
                    };
                    'multipart/form-data': {
                        address: unknown;
                    };
                    'text/plain': {
                        address: unknown;
                    };
                };
            };
        };
    };
    getBffEcommerceCompanyDetail: {
        parameters: {
            query: {
                ico: string;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': {
                        ico: string;
                        ares: unknown;
                    };
                    'multipart/form-data': {
                        ico: string;
                        ares: unknown;
                    };
                    'text/plain': {
                        ico: string;
                        ares: unknown;
                    };
                };
            };
        };
    };
    getBffEmailerList: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    getBffEmailerDetail: {
        parameters: {
            query: {
                id: string;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    'getBffEmailerDetail-log-explain': {
        parameters: {
            query: {
                emailId: string;
                locale: string;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    getBffEmailerStatus: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    'getBffEmailerSend-now': {
        parameters: {
            query: {
                emailId: string;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': {
                        /** @default true */
                        success: boolean;
                    };
                    'multipart/form-data': {
                        /** @default true */
                        success: boolean;
                    };
                    'text/plain': {
                        /** @default true */
                        success: boolean;
                    };
                };
            };
        };
    };
    'getBffEmailerSend-again': {
        parameters: {
            query: {
                emailId: string;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': {
                        /** @default true */
                        success: boolean;
                    };
                    'multipart/form-data': {
                        /** @default true */
                        success: boolean;
                    };
                    'text/plain': {
                        /** @default true */
                        success: boolean;
                    };
                };
            };
        };
    };
    'getBffEmailerSmtp-info': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    'postBffEmailerSetup-smtp': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                'application/json': {
                    testAddress: string;
                    host: string;
                    port: string;
                    authUser: string;
                    authPassword: string;
                };
                'multipart/form-data': {
                    testAddress: string;
                    host: string;
                    port: string;
                    authUser: string;
                    authPassword: string;
                };
                'text/plain': {
                    testAddress: string;
                    host: string;
                    port: string;
                    authUser: string;
                    authPassword: string;
                };
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': {
                        /** @default true */
                        success: boolean;
                    };
                    'multipart/form-data': {
                        /** @default true */
                        success: boolean;
                    };
                    'text/plain': {
                        /** @default true */
                        success: boolean;
                    };
                };
            };
        };
    };
    getBffEmailerStatistics: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    postBffEmailerCompose: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                'application/json': {
                    variant: string;
                    contactList?: string;
                    subject: string;
                    message: string;
                };
                'multipart/form-data': {
                    variant: string;
                    contactList?: string;
                    subject: string;
                    message: string;
                };
                'text/plain': {
                    variant: string;
                    contactList?: string;
                    subject: string;
                    message: string;
                };
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    getBffFormList: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    getBffFormTable: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    getBffFormStructure: {
        parameters: {
            query: {
                code: string;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    postBffFormAdd: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                'application/json': {
                    name: string;
                    code?: string;
                    description?: string;
                };
                'multipart/form-data': {
                    name: string;
                    code?: string;
                    description?: string;
                };
                'text/plain': {
                    name: string;
                    code?: string;
                    description?: string;
                };
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    'postBffFormUpdate-structure': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                'application/json': {
                    code: string;
                    info: {
                        name: string;
                        code: string;
                        active: boolean;
                        description?: string;
                    };
                    fields: {
                        key: string;
                        type: string;
                        label: string;
                        helperText?: string;
                        required: boolean;
                        defaultValue?: string;
                        options: Record<string, never>;
                    }[];
                };
                'multipart/form-data': {
                    code: string;
                    info: {
                        name: string;
                        code: string;
                        active: boolean;
                        description?: string;
                    };
                    fields: {
                        key: string;
                        type: string;
                        label: string;
                        helperText?: string;
                        required: boolean;
                        defaultValue?: string;
                        options: Record<string, never>;
                    }[];
                };
                'text/plain': {
                    code: string;
                    info: {
                        name: string;
                        code: string;
                        active: boolean;
                        description?: string;
                    };
                    fields: {
                        key: string;
                        type: string;
                        label: string;
                        helperText?: string;
                        required: boolean;
                        defaultValue?: string;
                        options: Record<string, never>;
                    }[];
                };
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': {
                        /** @default true */
                        success: boolean;
                    };
                    'multipart/form-data': {
                        /** @default true */
                        success: boolean;
                    };
                    'text/plain': {
                        /** @default true */
                        success: boolean;
                    };
                };
            };
        };
    };
    'postBffFormAdd-field': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                'application/json': {
                    formCode: string;
                };
                'multipart/form-data': {
                    formCode: string;
                };
                'text/plain': {
                    formCode: string;
                };
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': {
                        /** @default true */
                        success: boolean;
                    };
                    'multipart/form-data': {
                        /** @default true */
                        success: boolean;
                    };
                    'text/plain': {
                        /** @default true */
                        success: boolean;
                    };
                };
            };
        };
    };
    'postBffFormDuplicate-field': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                'application/json': {
                    formCode: string;
                    fieldCode: string;
                };
                'multipart/form-data': {
                    formCode: string;
                    fieldCode: string;
                };
                'text/plain': {
                    formCode: string;
                    fieldCode: string;
                };
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': {
                        /** @default true */
                        success: boolean;
                    };
                    'multipart/form-data': {
                        /** @default true */
                        success: boolean;
                    };
                    'text/plain': {
                        /** @default true */
                        success: boolean;
                    };
                };
            };
        };
    };
    'postBffFormRemove-field': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                'application/json': {
                    formCode: string;
                    fieldCode: string;
                };
                'multipart/form-data': {
                    formCode: string;
                    fieldCode: string;
                };
                'text/plain': {
                    formCode: string;
                    fieldCode: string;
                };
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': {
                        /** @default true */
                        success: boolean;
                    };
                    'multipart/form-data': {
                        /** @default true */
                        success: boolean;
                    };
                    'text/plain': {
                        /** @default true */
                        success: boolean;
                    };
                };
            };
        };
    };
    'postBffFormCopy-form': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                'application/json': {
                    formCode: string;
                    name?: string;
                };
                'multipart/form-data': {
                    formCode: string;
                    name?: string;
                };
                'text/plain': {
                    formCode: string;
                    name?: string;
                };
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': {
                        /** @default true */
                        success: boolean;
                        newCode: string;
                    };
                    'multipart/form-data': {
                        /** @default true */
                        success: boolean;
                        newCode: string;
                    };
                    'text/plain': {
                        /** @default true */
                        success: boolean;
                        newCode: string;
                    };
                };
            };
        };
    };
    getBffGopayStatus: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json':
                        | {
                              configured: boolean;
                              /** @constant */
                              connectionWorks: true;
                              environment: string;
                              goId: string;
                              clientId: string;
                              clientSecret: string;
                          }
                        | {
                              configured: boolean;
                              /** @constant */
                              connectionWorks: false;
                          };
                    'multipart/form-data':
                        | {
                              configured: boolean;
                              /** @constant */
                              connectionWorks: true;
                              environment: string;
                              goId: string;
                              clientId: string;
                              clientSecret: string;
                          }
                        | {
                              configured: boolean;
                              /** @constant */
                              connectionWorks: false;
                          };
                    'text/plain':
                        | {
                              configured: boolean;
                              /** @constant */
                              connectionWorks: true;
                              environment: string;
                              goId: string;
                              clientId: string;
                              clientSecret: string;
                          }
                        | {
                              configured: boolean;
                              /** @constant */
                              connectionWorks: false;
                          };
                };
            };
        };
    };
    'postBffGopayTest-connection': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                'application/json': {
                    environment: string;
                    clientId: string;
                    clientSecret: string;
                    goId: string;
                };
                'multipart/form-data': {
                    environment: string;
                    clientId: string;
                    clientSecret: string;
                    goId: string;
                };
                'text/plain': {
                    environment: string;
                    clientId: string;
                    clientSecret: string;
                    goId: string;
                };
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': {
                        success: boolean;
                        errorMessage?: string;
                    };
                    'multipart/form-data': {
                        success: boolean;
                        errorMessage?: string;
                    };
                    'text/plain': {
                        success: boolean;
                        errorMessage?: string;
                    };
                };
            };
        };
    };
    getBffInvoiceList: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    'getBffIotLockLock-list': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    'getBffIotLockLock-detail': {
        parameters: {
            query: {
                id: string;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    'getBffIotLockLock-detail-refresh': {
        parameters: {
            query: {
                lockId: string;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    'getBffIotLockLock-electric-quantity-list': {
        parameters: {
            query: {
                id: string;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    'getBffIotLockUnlock-now': {
        parameters: {
            query: {
                lockId: string;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    'getBffIotLockUnlock-record-list': {
        parameters: {
            query: {
                id: string;
                locale?: string;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    'postBffIotLockLock-add': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                'application/json': {
                    lockId: string;
                };
                'multipart/form-data': {
                    lockId: string;
                };
                'text/plain': {
                    lockId: string;
                };
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    'getBffIotLockPassword-list': {
        parameters: {
            query: {
                id: string;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    'postBffIotLockPassword-add': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                'application/json': {
                    lockId: number;
                    password?: string;
                    passwordName?: string;
                    /** Format: date-time */
                    startDate?: string;
                    /** Format: date-time */
                    endDate?: string;
                };
                'multipart/form-data': {
                    lockId: number;
                    password?: string;
                    passwordName?: string;
                    /** Format: date-time */
                    startDate?: string;
                    /** Format: date-time */
                    endDate?: string;
                };
                'text/plain': {
                    lockId: number;
                    password?: string;
                    passwordName?: string;
                    /** Format: date-time */
                    startDate?: string;
                    /** Format: date-time */
                    endDate?: string;
                };
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    'getBffIotLockPassword-delete': {
        parameters: {
            query: {
                keyboardPwdId: string;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    getBffMemberList: {
        parameters: {
            query?: {
                filterFulltextQuery?: string;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    postBffMemberCreate: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                'application/json': {
                    parentMemberId?: number;
                    username: string;
                    firstName: string;
                    lastName: string;
                    nick?: string;
                    personalNumber?: string;
                    description?: string;
                };
                'multipart/form-data': {
                    parentMemberId?: number;
                    username: string;
                    firstName: string;
                    lastName: string;
                    nick?: string;
                    personalNumber?: string;
                    description?: string;
                };
                'text/plain': {
                    parentMemberId?: number;
                    username: string;
                    firstName: string;
                    lastName: string;
                    nick?: string;
                    personalNumber?: string;
                    description?: string;
                };
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': {
                        /** @default true */
                        success: boolean;
                    };
                    'multipart/form-data': {
                        /** @default true */
                        success: boolean;
                    };
                    'text/plain': {
                        /** @default true */
                        success: boolean;
                    };
                };
            };
        };
    };
    'postBffMemberAdd-existing-user': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                'application/json': {
                    parentMemberId?: number;
                    username: string;
                    personalNumber?: string;
                    description?: string;
                };
                'multipart/form-data': {
                    parentMemberId?: number;
                    username: string;
                    personalNumber?: string;
                    description?: string;
                };
                'text/plain': {
                    parentMemberId?: number;
                    username: string;
                    personalNumber?: string;
                    description?: string;
                };
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': {
                        /** @default true */
                        success: boolean;
                    };
                    'multipart/form-data': {
                        /** @default true */
                        success: boolean;
                    };
                    'text/plain': {
                        /** @default true */
                        success: boolean;
                    };
                };
            };
        };
    };
    'postBffMemberConfirm-registration': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': {
                        /** @default true */
                        success: boolean;
                    };
                    'multipart/form-data': {
                        /** @default true */
                        success: boolean;
                    };
                    'text/plain': {
                        /** @default true */
                        success: boolean;
                    };
                };
            };
        };
    };
    postBffMemberBlock: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': {
                        /** @default true */
                        success: boolean;
                    };
                    'multipart/form-data': {
                        /** @default true */
                        success: boolean;
                    };
                    'text/plain': {
                        /** @default true */
                        success: boolean;
                    };
                };
            };
        };
    };
    'getBffNetworkRefetch-dns': {
        parameters: {
            query: {
                domain: string;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    'getBffNetworkDns-search': {
        parameters: {
            query: {
                query: string;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    'getBffNetworkRobots-txt': {
        parameters: {
            query: {
                domain: string;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    'getBffNetworkSsl-certificate': {
        parameters: {
            query: {
                domain: string;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    getBffNetworkSubdomains: {
        parameters: {
            query: {
                host: string;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    getBffNewsletterList: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    'getBffNewsletterJob-list': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    'getBffNewsletterJob-contact-list': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    'getBffNewsletterJob-statistics': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    'postBffNewsletterBulk-import': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                'application/json': {
                    contactList: string[];
                    source?: string;
                };
                'multipart/form-data': {
                    contactList: string[];
                    source?: string;
                };
                'text/plain': {
                    contactList: string[];
                    source?: string;
                };
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': {
                        /** @default true */
                        success: boolean;
                    };
                    'multipart/form-data': {
                        /** @default true */
                        success: boolean;
                    };
                    'text/plain': {
                        /** @default true */
                        success: boolean;
                    };
                };
            };
        };
    };
    'getBffIp-infoDetail': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    getBffLocaleList: {
        parameters: {
            query?: {
                locale?: string;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': {
                        items: {
                            id: number;
                            locale: string;
                            label: string;
                        }[];
                        itemCount: number;
                    };
                    'multipart/form-data': {
                        items: {
                            id: number;
                            locale: string;
                            label: string;
                        }[];
                        itemCount: number;
                    };
                    'text/plain': {
                        items: {
                            id: number;
                            locale: string;
                            label: string;
                        }[];
                        itemCount: number;
                    };
                };
            };
        };
    };
    getBffLogList: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    getBffLogDetail: {
        parameters: {
            query: {
                id: string;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    'getBffLogDetail-log-explain': {
        parameters: {
            query: {
                id: string;
                locale: string;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    postBffOrderCreate: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                'application/json': {
                    orderGroupId?: string;
                    customerEmail?: string;
                };
                'multipart/form-data': {
                    orderGroupId?: string;
                    customerEmail?: string;
                };
                'text/plain': {
                    orderGroupId?: string;
                    customerEmail?: string;
                };
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    getBffOrderDetail: {
        parameters: {
            query: {
                hash: string;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    'getBffOrderDetail-recurrence': {
        parameters: {
            query: {
                hash: string;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    'getBffOrderDetail-file': {
        parameters: {
            query: {
                hash: string;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    'getBffOrderDetail-log': {
        parameters: {
            query: {
                hash: string;
                page?: number;
                limit?: number;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': {
                        items: {
                            id: number;
                            message: string;
                            level: string;
                            insertedDate: Record<string, never> | string | number;
                        }[];
                        itemCount: number;
                    };
                    'multipart/form-data': {
                        items: {
                            id: number;
                            message: string;
                            level: string;
                            insertedDate: Record<string, never> | string | number;
                        }[];
                        itemCount: number;
                    };
                    'text/plain': {
                        items: {
                            id: number;
                            message: string;
                            level: string;
                            insertedDate: Record<string, never> | string | number;
                        }[];
                        itemCount: number;
                    };
                };
            };
        };
    };
    'getBffOrderDetail-log-explain': {
        parameters: {
            query: {
                hash: string;
                locale: string;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    'postBffOrderMark-as-paid': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                'application/json': {
                    hash: string;
                };
                'multipart/form-data': {
                    hash: string;
                };
                'text/plain': {
                    hash: string;
                };
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': {
                        /** @default true */
                        success: boolean;
                    };
                    'multipart/form-data': {
                        /** @default true */
                        success: boolean;
                    };
                    'text/plain': {
                        /** @default true */
                        success: boolean;
                    };
                };
            };
        };
    };
    'postBffOrderMark-as-non-paid': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                'application/json': {
                    hash: string;
                };
                'multipart/form-data': {
                    hash: string;
                };
                'text/plain': {
                    hash: string;
                };
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': {
                        /** @default true */
                        success: boolean;
                    };
                    'multipart/form-data': {
                        /** @default true */
                        success: boolean;
                    };
                    'text/plain': {
                        /** @default true */
                        success: boolean;
                    };
                };
            };
        };
    };
    'postBffOrderSet-item-storno': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                'application/json': {
                    orderHash: string;
                    itemId: string;
                };
                'multipart/form-data': {
                    orderHash: string;
                    itemId: string;
                };
                'text/plain': {
                    orderHash: string;
                    itemId: string;
                };
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': {
                        /** @default true */
                        success: boolean;
                    };
                    'multipart/form-data': {
                        /** @default true */
                        success: boolean;
                    };
                    'text/plain': {
                        /** @default true */
                        success: boolean;
                    };
                };
            };
        };
    };
    'postBffOrderRemove-item': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                'application/json': {
                    orderHash: string;
                    itemId: string;
                };
                'multipart/form-data': {
                    orderHash: string;
                    itemId: string;
                };
                'text/plain': {
                    orderHash: string;
                    itemId: string;
                };
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': {
                        /** @default true */
                        success: boolean;
                    };
                    'multipart/form-data': {
                        /** @default true */
                        success: boolean;
                    };
                    'text/plain': {
                        /** @default true */
                        success: boolean;
                    };
                };
            };
        };
    };
    'getBffOrderOnline-payment-grid': {
        parameters: {
            query: {
                orderHash: string;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    'postBffOrderCreate-payment': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                'application/json': {
                    orderHash: string;
                    provider: string;
                };
                'multipart/form-data': {
                    orderHash: string;
                    provider: string;
                };
                'text/plain': {
                    orderHash: string;
                    provider: string;
                };
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': {
                        /** @default true */
                        success: boolean;
                        redirectUrl?: string;
                    };
                    'multipart/form-data': {
                        /** @default true */
                        success: boolean;
                        redirectUrl?: string;
                    };
                    'text/plain': {
                        /** @default true */
                        success: boolean;
                        redirectUrl?: string;
                    };
                };
            };
        };
    };
    'postBffOrderResend-notification': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                'application/json': {
                    orderHash: string;
                    statusCode?: string;
                };
                'multipart/form-data': {
                    orderHash: string;
                    statusCode?: string;
                };
                'text/plain': {
                    orderHash: string;
                    statusCode?: string;
                };
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': {
                        /** @default true */
                        success: boolean;
                    };
                    'multipart/form-data': {
                        /** @default true */
                        success: boolean;
                    };
                    'text/plain': {
                        /** @default true */
                        success: boolean;
                    };
                };
            };
        };
    };
    'postBffOrderUpdate-notice': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                'application/json': {
                    orderHash: string;
                    internalNotice: string;
                    publicNotice: string;
                };
                'multipart/form-data': {
                    orderHash: string;
                    internalNotice: string;
                    publicNotice: string;
                };
                'text/plain': {
                    orderHash: string;
                    internalNotice: string;
                    publicNotice: string;
                };
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': {
                        /** @default true */
                        success: boolean;
                    };
                    'multipart/form-data': {
                        /** @default true */
                        success: boolean;
                    };
                    'text/plain': {
                        /** @default true */
                        success: boolean;
                    };
                };
            };
        };
    };
    'postBffOrderAdd-product': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                'application/json': {
                    orderHash: string;
                    productCode: string;
                    productVariantCode?: string;
                    label: string;
                    price: number;
                    vat: number;
                    count: number;
                };
                'multipart/form-data': {
                    orderHash: string;
                    productCode: string;
                    productVariantCode?: string;
                    label: string;
                    price: number;
                    vat: number;
                    count: number;
                };
                'text/plain': {
                    orderHash: string;
                    productCode: string;
                    productVariantCode?: string;
                    label: string;
                    price: number;
                    vat: number;
                    count: number;
                };
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': {
                        /** @default true */
                        success: boolean;
                    };
                    'multipart/form-data': {
                        /** @default true */
                        success: boolean;
                    };
                    'text/plain': {
                        /** @default true */
                        success: boolean;
                    };
                };
            };
        };
    };
    'postBffOrderAdd-virtual-product': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                'application/json': {
                    orderHash: string;
                    label: string;
                    price: number;
                    vat: number;
                    count: number;
                };
                'multipart/form-data': {
                    orderHash: string;
                    label: string;
                    price: number;
                    vat: number;
                    count: number;
                };
                'text/plain': {
                    orderHash: string;
                    label: string;
                    price: number;
                    vat: number;
                    count: number;
                };
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': {
                        /** @default true */
                        success: boolean;
                    };
                    'multipart/form-data': {
                        /** @default true */
                        success: boolean;
                    };
                    'text/plain': {
                        /** @default true */
                        success: boolean;
                    };
                };
            };
        };
    };
    'postBffOrderAdd-credit': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                'application/json': {
                    orderHash: string;
                    label: string;
                    price: number;
                    credit: number;
                    vat: number;
                };
                'multipart/form-data': {
                    orderHash: string;
                    label: string;
                    price: number;
                    credit: number;
                    vat: number;
                };
                'text/plain': {
                    orderHash: string;
                    label: string;
                    price: number;
                    credit: number;
                    vat: number;
                };
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': {
                        /** @default true */
                        success: boolean;
                    };
                    'multipart/form-data': {
                        /** @default true */
                        success: boolean;
                    };
                    'text/plain': {
                        /** @default true */
                        success: boolean;
                    };
                };
            };
        };
    };
    'postBffOrderAdd-event': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                'application/json': {
                    orderHash: string;
                    eventCode: string;
                };
                'multipart/form-data': {
                    orderHash: string;
                    eventCode: string;
                };
                'text/plain': {
                    orderHash: string;
                    eventCode: string;
                };
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': {
                        /** @default true */
                        success: boolean;
                    };
                    'multipart/form-data': {
                        /** @default true */
                        success: boolean;
                    };
                    'text/plain': {
                        /** @default true */
                        success: boolean;
                    };
                };
            };
        };
    };
    'postBffOrderDetail-recurrence-delete': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                'application/json': {
                    orderHash: string;
                    paymentId: string;
                };
                'multipart/form-data': {
                    orderHash: string;
                    paymentId: string;
                };
                'text/plain': {
                    orderHash: string;
                    paymentId: string;
                };
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': {
                        /** @default true */
                        success: boolean;
                    };
                    'multipart/form-data': {
                        /** @default true */
                        success: boolean;
                    };
                    'text/plain': {
                        /** @default true */
                        success: boolean;
                    };
                };
            };
        };
    };
    'getBffOrderCreate-invoice': {
        parameters: {
            query: {
                hash: string;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': {
                        /** @default true */
                        success: boolean;
                    };
                    'multipart/form-data': {
                        /** @default true */
                        success: boolean;
                    };
                    'text/plain': {
                        /** @default true */
                        success: boolean;
                    };
                };
            };
        };
    };
    postBffOrganisationRegister: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                'application/json': {
                    name: string;
                    email: string;
                    firstName: string;
                    lastName: string;
                    password: string;
                    slug?: string;
                    description?: string;
                    companyRegistrationNumber?: string;
                    taxIdentificationNumber?: string;
                    timezone?: string;
                    checkboxTerms?: boolean;
                    checkboxMarketing?: boolean;
                    locale?: string;
                    partnerOrganisationSlug?: string;
                };
                'multipart/form-data': {
                    name: string;
                    email: string;
                    firstName: string;
                    lastName: string;
                    password: string;
                    slug?: string;
                    description?: string;
                    companyRegistrationNumber?: string;
                    taxIdentificationNumber?: string;
                    timezone?: string;
                    checkboxTerms?: boolean;
                    checkboxMarketing?: boolean;
                    locale?: string;
                    partnerOrganisationSlug?: string;
                };
                'text/plain': {
                    name: string;
                    email: string;
                    firstName: string;
                    lastName: string;
                    password: string;
                    slug?: string;
                    description?: string;
                    companyRegistrationNumber?: string;
                    taxIdentificationNumber?: string;
                    timezone?: string;
                    checkboxTerms?: boolean;
                    checkboxMarketing?: boolean;
                    locale?: string;
                    partnerOrganisationSlug?: string;
                };
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    'getBffOrganisationStorage-usage': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    'getBffPacketaSync-branches': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': {
                        /** @default true */
                        success: boolean;
                    };
                    'multipart/form-data': {
                        /** @default true */
                        success: boolean;
                    };
                    'text/plain': {
                        /** @default true */
                        success: boolean;
                    };
                };
            };
        };
    };
    getBffPersonSearch: {
        parameters: {
            query?: {
                query?: string;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': {
                        items: {
                            name: string;
                            memberId?: number;
                            customerId?: number;
                            email?: string;
                            phone?: string;
                            avatarInfo?: {
                                fullName?: string;
                                avatarUrl?: string;
                                activityInfo?: {
                                    status?: string;
                                    inActiveMinutes?: number;
                                    lastActivity?: Record<string, never> | string | number;
                                };
                            };
                        }[];
                    };
                    'multipart/form-data': {
                        items: {
                            name: string;
                            memberId?: number;
                            customerId?: number;
                            email?: string;
                            phone?: string;
                            avatarInfo?: {
                                fullName?: string;
                                avatarUrl?: string;
                                activityInfo?: {
                                    status?: string;
                                    inActiveMinutes?: number;
                                    lastActivity?: Record<string, never> | string | number;
                                };
                            };
                        }[];
                    };
                    'text/plain': {
                        items: {
                            name: string;
                            memberId?: number;
                            customerId?: number;
                            email?: string;
                            phone?: string;
                            avatarInfo?: {
                                fullName?: string;
                                avatarUrl?: string;
                                activityInfo?: {
                                    status?: string;
                                    inActiveMinutes?: number;
                                    lastActivity?: Record<string, never> | string | number;
                                };
                            };
                        }[];
                    };
                };
            };
        };
    };
    'getBffPostStatic-page': {
        parameters: {
            query: {
                slug: string;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    getBffProductList: {
        parameters: {
            query?: {
                mainCategoryCode?: string;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    'getBffProductProduct-detail': {
        parameters: {
            query: {
                productCode: string;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    'getBffProductPrice-history': {
        parameters: {
            query: {
                productCode: string;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    'getBffProductSearch-related-products': {
        parameters: {
            query: {
                productCode: string;
                query: string;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    'getBffProductProduct-detail-related': {
        parameters: {
            query: {
                productCode: string;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    'postBffProductConnect-related-product': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                'application/json': {
                    productCode: string;
                    relatedCode: string;
                };
                'multipart/form-data': {
                    productCode: string;
                    relatedCode: string;
                };
                'text/plain': {
                    productCode: string;
                    relatedCode: string;
                };
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    'postBffProductDisconnect-related-product': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                'application/json': {
                    productCode: string;
                    relatedCode: string;
                };
                'multipart/form-data': {
                    productCode: string;
                    relatedCode: string;
                };
                'text/plain': {
                    productCode: string;
                    relatedCode: string;
                };
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    'getBffProductSearch-product-list-autocomplete': {
        parameters: {
            query: {
                searchQuery: string;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    'getBffProductSearch-product-variant-list': {
        parameters: {
            query: {
                productCode: string;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    'postBffProductConnect-event': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                'application/json': {
                    productCode: string;
                    eventCode: string;
                };
                'multipart/form-data': {
                    productCode: string;
                    eventCode: string;
                };
                'text/plain': {
                    productCode: string;
                    eventCode: string;
                };
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    'postBffProductDisconnect-event': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                'application/json': {
                    productCode: string;
                };
                'multipart/form-data': {
                    productCode: string;
                };
                'text/plain': {
                    productCode: string;
                };
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    'getBffProductProduct-variant-list': {
        parameters: {
            query: {
                productCode: string;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    'postBffProductUpdate-variant': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                'application/json': {
                    id: string;
                    code: string;
                    haystack: string | number | boolean;
                    property: string;
                };
                'multipart/form-data': {
                    id: string;
                    code: string;
                    haystack: string | number | boolean;
                    property: string;
                };
                'text/plain': {
                    id: string;
                    code: string;
                    haystack: string | number | boolean;
                    property: string;
                };
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    'getBffProduct-categoryList': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    'getBffProduct-categoryList-selectbox': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    'getBffProduct-categoryCategory-detail': {
        parameters: {
            query: {
                code: string;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    'postBffProduct-categoryCategory-create': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                'application/json': {
                    name: string;
                    code: string;
                    slug?: string;
                    parentCode?: string;
                };
                'multipart/form-data': {
                    name: string;
                    code: string;
                    slug?: string;
                    parentCode?: string;
                };
                'text/plain': {
                    name: string;
                    code: string;
                    slug?: string;
                    parentCode?: string;
                };
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    'postBffProduct-categoryCategory-update': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                'application/json': {
                    name: string;
                    code: string;
                    slug?: string;
                    description?: string;
                    active?: boolean;
                    internal?: boolean;
                    b2b?: boolean;
                };
                'multipart/form-data': {
                    name: string;
                    code: string;
                    slug?: string;
                    description?: string;
                    active?: boolean;
                    internal?: boolean;
                    b2b?: boolean;
                };
                'text/plain': {
                    name: string;
                    code: string;
                    slug?: string;
                    description?: string;
                    active?: boolean;
                    internal?: boolean;
                    b2b?: boolean;
                };
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    getBffSearch: {
        parameters: {
            query?: {
                query?: string;
                locale?: string;
                category?: string;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': {
                        query: string;
                        items: {
                            type: string;
                            label: string;
                            description?: string;
                            url?: string;
                            score: number;
                        }[];
                    };
                    'multipart/form-data': {
                        query: string;
                        items: {
                            type: string;
                            label: string;
                            description?: string;
                            url?: string;
                            score: number;
                        }[];
                    };
                    'text/plain': {
                        query: string;
                        items: {
                            type: string;
                            label: string;
                            description?: string;
                            url?: string;
                            score: number;
                        }[];
                    };
                };
            };
        };
    };
    getBffSearchUser: {
        parameters: {
            query: {
                email: string;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    'getBffSettingsLink-blob': {
        parameters: {
            query: {
                blobToken: string;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': {
                        /** @default true */
                        success: boolean;
                    };
                    'multipart/form-data': {
                        /** @default true */
                        success: boolean;
                    };
                    'text/plain': {
                        /** @default true */
                        success: boolean;
                    };
                };
            };
        };
    };
    'getBffSettingsVat-rates': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    'getBffSettingsEnv-variables': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    'getBffSettingsEnv-variable-value': {
        parameters: {
            query: {
                key: string;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': {
                        value: string;
                    };
                    'multipart/form-data': {
                        value: string;
                    };
                    'text/plain': {
                        value: string;
                    };
                };
            };
        };
    };
    'postBffSettingsEnv-change-variable-value': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                'application/json': {
                    key: string;
                    oldValue: string;
                    newValue: string;
                };
                'multipart/form-data': {
                    key: string;
                    oldValue: string;
                    newValue: string;
                };
                'text/plain': {
                    key: string;
                    oldValue: string;
                    newValue: string;
                };
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': {
                        /** @default true */
                        success: boolean;
                    };
                    'multipart/form-data': {
                        /** @default true */
                        success: boolean;
                    };
                    'text/plain': {
                        /** @default true */
                        success: boolean;
                    };
                };
            };
        };
    };
    getBffTestPing: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    getBffTestPdf: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    'getBffTestProduct-import-feed': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    'getBffTestConnect-import-feed': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    getBffTestNova: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    getBffTestMaps: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    'getBffTransactionAccount-info': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    getBffTransactionList: {
        parameters: {
            query?: {
                orderHash?: string;
                filterAccount?: string;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    'getBffTransactionSync-all': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': {
                        /** @default true */
                        success: boolean;
                    };
                    'multipart/form-data': {
                        /** @default true */
                        success: boolean;
                    };
                    'text/plain': {
                        /** @default true */
                        success: boolean;
                    };
                };
            };
        };
    };
    'postBffTransactionAdd-api-token': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                'application/json': {
                    apiToken: string;
                };
                'multipart/form-data': {
                    apiToken: string;
                };
                'text/plain': {
                    apiToken: string;
                };
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': {
                        /** @default true */
                        success: boolean;
                    };
                    'multipart/form-data': {
                        /** @default true */
                        success: boolean;
                    };
                    'text/plain': {
                        /** @default true */
                        success: boolean;
                    };
                };
            };
        };
    };
    getBffWorkflowStatus: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    'postBffWorkflowAdd-status': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                'application/json': {
                    label: string;
                    code: string;
                    color: string;
                    type: string;
                };
                'multipart/form-data': {
                    label: string;
                    code: string;
                    color: string;
                    type: string;
                };
                'text/plain': {
                    label: string;
                    code: string;
                    color: string;
                    type: string;
                };
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': {
                        /** @default true */
                        success: boolean;
                    };
                    'multipart/form-data': {
                        /** @default true */
                        success: boolean;
                    };
                    'text/plain': {
                        /** @default true */
                        success: boolean;
                    };
                };
            };
        };
    };
    postBffWorkflowUpdate: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                'application/json': {
                    label: string;
                    code: string;
                    internalName?: string;
                    publicLabel?: string;
                    color: string;
                    markAsPaid: boolean;
                    createInvoice: boolean;
                    redirectToCode?: string;
                    redirectTimeout?: string;
                };
                'multipart/form-data': {
                    label: string;
                    code: string;
                    internalName?: string;
                    publicLabel?: string;
                    color: string;
                    markAsPaid: boolean;
                    createInvoice: boolean;
                    redirectToCode?: string;
                    redirectTimeout?: string;
                };
                'text/plain': {
                    label: string;
                    code: string;
                    internalName?: string;
                    publicLabel?: string;
                    color: string;
                    markAsPaid: boolean;
                    createInvoice: boolean;
                    redirectToCode?: string;
                    redirectTimeout?: string;
                };
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': {
                        /** @default true */
                        success: boolean;
                    };
                    'multipart/form-data': {
                        /** @default true */
                        success: boolean;
                    };
                    'text/plain': {
                        /** @default true */
                        success: boolean;
                    };
                };
            };
        };
    };
    'postBffWorkflowSet-status-position': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                'application/json': {
                    code: string;
                    direction: string;
                };
                'multipart/form-data': {
                    code: string;
                    direction: string;
                };
                'text/plain': {
                    code: string;
                    direction: string;
                };
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': {
                        /** @default true */
                        success: boolean;
                    };
                    'multipart/form-data': {
                        /** @default true */
                        success: boolean;
                    };
                    'text/plain': {
                        /** @default true */
                        success: boolean;
                    };
                };
            };
        };
    };
}

/**
 * Note: [💞] Ignore a discrepancy between file name and entity name
 */
